// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Model
{
    using Newtonsoft.Json;
    using System;
    using System.ComponentModel.DataAnnotations;
    using System.Data.SqlClient;
    using TrackerEnabledDbContext;

    // PendingReferrals
    [Table("PendingReferrals", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.0.0")]
    public partial class PendingReferral: IEntity
    {
        // PendingReferral
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"Id", Order = 1, TypeName = "int")]
        [Index(@"PK_PendingReferrals", 1, IsUnique = true, IsClustered = true)]
        [Key]
        [Display(Name = "Id")]
        public int Id { get; set; } // Id (Primary key)

        [Column(@"StudentId", Order = 2, TypeName = "int")]
        [Display(Name = "Student ID")]
        public int StudentId { get; set; } // StudentId

        [Column(@"StudentFirstName", Order = 3, TypeName = "varchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Student first name")]
        public string StudentFirstName { get; set; } // StudentFirstName (length: 50)

        [Column(@"StudentLastName", Order = 4, TypeName = "varchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Student last name")]
        public string StudentLastName { get; set; } // StudentLastName (length: 50)

        [Column(@"DistrictId", Order = 5, TypeName = "int")]
        [Display(Name = "District ID")]
        public int DistrictId { get; set; } // DistrictId

        [Column(@"DistrictCode", Order = 6, TypeName = "varchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "District code")]
        public string DistrictCode { get; set; } // DistrictCode (length: 50)

        [Column(@"ProviderId", Order = 7, TypeName = "int")]
        [Display(Name = "Provider ID")]
        public int ProviderId { get; set; } // ProviderId

        [Column(@"ProviderFirstName", Order = 8, TypeName = "varchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Provider first name")]
        public string ProviderFirstName { get; set; } // ProviderFirstName (length: 50)

        [Column(@"ProviderLastName", Order = 9, TypeName = "varchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Provider last name")]
        public string ProviderLastName { get; set; } // ProviderLastName (length: 50)

        [Column(@"ProviderTitle", Order = 10, TypeName = "varchar")]
        [MaxLength(100)]
        [StringLength(100)]
        [Display(Name = "Provider title")]
        public string ProviderTitle { get; set; } // ProviderTitle (length: 100)

        [Column(@"ServiceTypeId", Order = 11, TypeName = "int")]
        [Display(Name = "Service type ID")]
        public int ServiceTypeId { get; set; } // ServiceTypeId

        [Column(@"ServiceName", Order = 12, TypeName = "varchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Service name")]
        public string ServiceName { get; set; } // ServiceName (length: 50)

        [Column(@"PendingReferralJobRunId", Order = 13, TypeName = "int")]
        [Display(Name = "Pending referral job run ID")]
        public int PendingReferralJobRunId { get; set; } // PendingReferralJobRunId

        // Foreign keys

        /// <summary>
        /// Parent SchoolDistrict pointed by [PendingReferrals].([DistrictId]) (FK_PendingReferrals_SchoolDistricts)
        /// </summary>
        [InverseProperty("PendingReferrals")]
        [ForeignKey("DistrictId")] public SchoolDistrict SchoolDistrict { get; set; } // FK_PendingReferrals_SchoolDistricts

        /// <summary>
        /// Parent PendingReferralReportJobRun pointed by [PendingReferrals].([PendingReferralJobRunId]) (FK_PendingReferrals_PendingReferralJobRuns)
        /// </summary>
        [InverseProperty("PendingReferrals")]
        [ForeignKey("PendingReferralJobRunId")] public PendingReferralReportJobRun PendingReferralReportJobRun { get; set; } // FK_PendingReferrals_PendingReferralJobRuns

        /// <summary>
        /// Parent Provider pointed by [PendingReferrals].([ProviderId]) (FK_PendingReferrals_Providers)
        /// </summary>
        [InverseProperty("PendingReferrals")]
        [ForeignKey("ProviderId")] public Provider Provider { get; set; } // FK_PendingReferrals_Providers

        /// <summary>
        /// Parent ServiceType pointed by [PendingReferrals].([ServiceTypeId]) (FK_PendingReferrals_ServiceTypes)
        /// </summary>
        [InverseProperty("PendingReferrals")]
        [ForeignKey("ServiceTypeId")] public ServiceType ServiceType { get; set; } // FK_PendingReferrals_ServiceTypes

        /// <summary>
        /// Parent Student pointed by [PendingReferrals].([StudentId]) (FK_PendingReferrals_Students)
        /// </summary>
        [InverseProperty("PendingReferrals")]
        [ForeignKey("StudentId")] public Student Student { get; set; } // FK_PendingReferrals_Students

        public PendingReferral()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>
