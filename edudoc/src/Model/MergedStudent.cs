// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Model
{
    using Newtonsoft.Json;
    using System;
    using System.ComponentModel.DataAnnotations;
    using System.Data.SqlClient;
    using TrackerEnabledDbContext;

    // MergedStudents
    [Table("MergedStudents", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.0.0")]
    public partial class MergedStudent: IEntity
    {
        // MergedStudent
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"Id", Order = 1, TypeName = "int")]
        [Index(@"PK_MergedStudents", 1, IsUnique = true, IsClustered = true)]
        [Key]
        [Display(Name = "Id")]
        public int Id { get; set; } // Id (Primary key)

        [Column(@"FirstName", Order = 2, TypeName = "varchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "First name")]
        public string FirstName { get; set; } // FirstName (length: 50)

        [Column(@"MiddleName", Order = 3, TypeName = "varchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Middle name")]
        public string MiddleName { get; set; } // MiddleName (length: 50)

        [Column(@"LastName", Order = 4, TypeName = "varchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Last name")]
        public string LastName { get; set; } // LastName (length: 50)

        [Column(@"StudentCode", Order = 5, TypeName = "varchar")]
        [MaxLength(12)]
        [StringLength(12)]
        [Display(Name = "Student code")]
        public string StudentCode { get; set; } // StudentCode (length: 12)

        [Column(@"Grade", Order = 6, TypeName = "varchar")]
        [MaxLength(2)]
        [StringLength(2)]
        [Display(Name = "Grade")]
        public string Grade { get; set; } // Grade (length: 2)

        [Column(@"DateOfBirth", Order = 7, TypeName = "datetime")]
        [Display(Name = "Date of birth")]
        public System.DateTime DateOfBirth { get; set; } // DateOfBirth

        [Column(@"AddressId", Order = 8, TypeName = "int")]
        [Display(Name = "Address ID")]
        public int? AddressId { get; set; } // AddressId

        [Column(@"SchoolId", Order = 9, TypeName = "int")]
        [Display(Name = "School ID")]
        public int SchoolId { get; set; } // SchoolId

        [Column(@"CreatedById", Order = 10, TypeName = "int")]
        [Display(Name = "Created by ID")]
        public int CreatedById { get; set; } // CreatedById

        [Column(@"DateCreated", Order = 11, TypeName = "datetime")]
        [Display(Name = "Date created")]
        public System.DateTime? DateCreated { get; set; } // DateCreated

        [Column(@"MergedToStudentId", Order = 12, TypeName = "int")]
        [Display(Name = "Merged to student ID")]
        public int MergedToStudentId { get; set; } // MergedToStudentId

        // Foreign keys

        /// <summary>
        /// Parent Address pointed by [MergedStudents].([AddressId]) (FK_MergedStudents_Addresses)
        /// </summary>
        [InverseProperty("MergedStudents")]
        [ForeignKey("AddressId")] public Address Address { get; set; } // FK_MergedStudents_Addresses

        /// <summary>
        /// Parent User pointed by [MergedStudents].([CreatedById]) (FK_MergedStudents_CreatedBy)
        /// </summary>
        [InverseProperty("MergedStudents")]
        [ForeignKey("CreatedById")] public User User { get; set; } // FK_MergedStudents_CreatedBy

        /// <summary>
        /// Parent Student pointed by [MergedStudents].([MergedToStudentId]) (FK_MergedStudents_Students)
        /// </summary>
        [InverseProperty("MergedStudents")]
        [ForeignKey("MergedToStudentId")] public Student Student { get; set; } // FK_MergedStudents_Students

        /// <summary>
        /// Parent School pointed by [MergedStudents].([SchoolId]) (FK_MergedStudents_School)
        /// </summary>
        [InverseProperty("MergedStudents")]
        [ForeignKey("SchoolId")] public School School { get; set; } // FK_MergedStudents_School

        public MergedStudent()
        {
            CreatedById = 1;
            DateCreated = System.DateTime.UtcNow;
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>
