// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Model
{
    using Newtonsoft.Json;
    using System;
    using System.ComponentModel.DataAnnotations;
    using System.Data.SqlClient;
    using TrackerEnabledDbContext;

    // BillingFailures
    [Table("BillingFailures", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.0.0")]
    public partial class BillingFailure: IEntity
    {
        // BillingFailure
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"Id", Order = 1, TypeName = "int")]
        [Index(@"PK_BillingFailures", 1, IsUnique = true, IsClustered = true)]
        [Key]
        [Display(Name = "Id")]
        public int Id { get; set; } // Id (Primary key)

        [Column(@"EncounterStudentId", Order = 2, TypeName = "int")]
        [Display(Name = "Encounter student ID")]
        public int EncounterStudentId { get; set; } // EncounterStudentId

        [Column(@"BillingFailureReasonId", Order = 3, TypeName = "int")]
        [Display(Name = "Billing failure reason ID")]
        public int BillingFailureReasonId { get; set; } // BillingFailureReasonId

        [Column(@"BillingScheduleId", Order = 4, TypeName = "int")]
        [Display(Name = "Billing schedule ID")]
        public int? BillingScheduleId { get; set; } // BillingScheduleId

        [Column(@"DateOfFailure", Order = 5, TypeName = "datetime")]
        [Display(Name = "Date of failure")]
        public System.DateTime DateOfFailure { get; set; } // DateOfFailure

        [Column(@"IssueResolved", Order = 6, TypeName = "bit")]
        [Display(Name = "Issue resolved")]
        public bool IssueResolved { get; set; } // IssueResolved

        [Column(@"DateResolved", Order = 7, TypeName = "datetime")]
        [Display(Name = "Date resolved")]
        public System.DateTime? DateResolved { get; set; } // DateResolved

        [Column(@"ResolvedById", Order = 8, TypeName = "int")]
        [Display(Name = "Resolved by ID")]
        public int? ResolvedById { get; set; } // ResolvedById

        // Foreign keys

        /// <summary>
        /// Parent BillingFailureReason pointed by [BillingFailures].([BillingFailureReasonId]) (FK_BillingFailures_BillingFailureReason)
        /// </summary>
        [InverseProperty("BillingFailures")]
        [ForeignKey("BillingFailureReasonId")] public BillingFailureReason BillingFailureReason { get; set; } // FK_BillingFailures_BillingFailureReason

        /// <summary>
        /// Parent BillingSchedule pointed by [BillingFailures].([BillingScheduleId]) (FK_BillingFailures_BillingSchedule)
        /// </summary>
        [InverseProperty("BillingFailures")]
        [ForeignKey("BillingScheduleId")] public BillingSchedule BillingSchedule { get; set; } // FK_BillingFailures_BillingSchedule

        /// <summary>
        /// Parent EncounterStudent pointed by [BillingFailures].([EncounterStudentId]) (FK_BillingFailures_EncounterStudent)
        /// </summary>
        [InverseProperty("BillingFailures")]
        [ForeignKey("EncounterStudentId")] public EncounterStudent EncounterStudent { get; set; } // FK_BillingFailures_EncounterStudent

        /// <summary>
        /// Parent User pointed by [BillingFailures].([ResolvedById]) (FK_BillingFailures_ResolvedBy)
        /// </summary>
        [InverseProperty("BillingFailures")]
        [ForeignKey("ResolvedById")] public User User { get; set; } // FK_BillingFailures_ResolvedBy

        public BillingFailure()
        {
            DateOfFailure = System.DateTime.Now;
            IssueResolved = false;
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>
