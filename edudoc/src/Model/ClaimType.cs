// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Model
{
    using Newtonsoft.Json;
    using System;
    using System.ComponentModel.DataAnnotations;
    using System.Data.SqlClient;
    using TrackerEnabledDbContext;

    // ClaimTypes
    [Table("ClaimTypes", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.0.0")]
    public partial class ClaimType: IEntity, IBasicNameEntity
    {
        // ClaimType
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"Id", Order = 1, TypeName = "int")]
        [Index(@"PK_ClaimTypes", 1, IsUnique = true, IsClustered = true)]
        [Key]
        [Display(Name = "Id")]
        public int Id { get; set; } // Id (Primary key)

        [Column(@"Name", Order = 2, TypeName = "varchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Name")]
        public string Name { get; set; } // Name (length: 50)

        [Column(@"Alias", Order = 3, TypeName = "varchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Alias")]
        public string Alias { get; set; } // Alias (length: 50)

        [Column(@"ParentId", Order = 4, TypeName = "int")]
        [Display(Name = "Parent ID")]
        public int? ParentId { get; set; } // ParentId

        [Column(@"IsVisible", Order = 5, TypeName = "bit")]
        [Display(Name = "Is visible")]
        public bool IsVisible { get; set; } // IsVisible

        // Reverse navigation

        /// <summary>
        /// Child UserRoleClaims where [UserRoleClaims].[ClaimTypeId] point to this entity (FK_UserRoleClaims_ClaimTypes)
        /// </summary>
        public System.Collections.Generic.ICollection<UserRoleClaim> UserRoleClaims { get; set; } // UserRoleClaims.FK_UserRoleClaims_ClaimTypes
        /// <summary>
        /// Child UserTypes (Many-to-Many) mapped by table [UserTypesClaimTypes]
        /// </summary>
        public System.Collections.Generic.ICollection<UserType> UserTypes { get; set; } // Many to many mapping

        public ClaimType()
        {
            IsVisible = true;
            UserRoleClaims = new System.Collections.Generic.List<UserRoleClaim>();
            UserTypes = new System.Collections.Generic.List<UserType>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>
