// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Model
{
    using Newtonsoft.Json;
    using System;
    using System.ComponentModel.DataAnnotations;
    using System.Data.SqlClient;
    using TrackerEnabledDbContext;

    // Counties
    [Table("Counties", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.0.0")]
    public partial class County
    {
        // County
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"Zip", Order = 1, TypeName = "nvarchar")]
        [Index(@"PK_Counties", 1, IsUnique = true, IsClustered = true)]
        [MaxLength(20)]
        [StringLength(20)]
        [Key]
        [Display(Name = "Zip")]
        public string Zip { get; set; } // Zip (Primary key) (length: 20)

        [Column(@"City", Order = 2, TypeName = "varchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "City")]
        public string City { get; set; } // City (length: 50)

        [Column(@"StateCode", Order = 3, TypeName = "char")]
        [MaxLength(2)]
        [StringLength(2)]
        [Display(Name = "State code")]
        public string StateCode { get; set; } // StateCode (length: 2)

        [Column(@"CountyName", Order = 4, TypeName = "varchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "County name")]
        public string CountyName { get; set; } // CountyName (length: 50)

        [Column(@"Latitude", Order = 5, TypeName = "decimal")]
        [Display(Name = "Latitude")]
        public decimal? Latitude { get; set; } // Latitude

        [Column(@"Longitude", Order = 6, TypeName = "decimal")]
        [Display(Name = "Longitude")]
        public decimal? Longitude { get; set; } // Longitude

        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"Id", Order = 7, TypeName = "int")]
        [Display(Name = "Id")]
        public int Id { get; set; } // Id

        public County()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>
