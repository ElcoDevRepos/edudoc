// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Model
{
    using Newtonsoft.Json;
    using System;
    using System.ComponentModel.DataAnnotations;
    using System.Data.SqlClient;
    using TrackerEnabledDbContext;

    // ProviderCaseUploads
    [Table("ProviderCaseUploads", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.0.0")]
    public partial class ProviderCaseUpload: IEntity
    {
        // ProviderCaseUpload

        ///<summary>
        /// Module
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"Id", Order = 1, TypeName = "int")]
        [Index(@"PK_ProviderCaseUploads", 1, IsUnique = true, IsClustered = true)]
        [Key]
        [Display(Name = "Id")]
        public int Id { get; set; } // Id (Primary key)

        [Column(@"ProviderId", Order = 2, TypeName = "int")]
        [Display(Name = "Provider ID")]
        public int? ProviderId { get; set; } // ProviderId

        [Column(@"DistrictId", Order = 3, TypeName = "int")]
        [Display(Name = "District ID")]
        public int DistrictId { get; set; } // DistrictId

        [Column(@"FirstName", Order = 4, TypeName = "varchar(max)")]
        [Display(Name = "First name")]
        public string FirstName { get; set; } // FirstName

        [Column(@"MiddleName", Order = 5, TypeName = "varchar(max)")]
        [Display(Name = "Middle name")]
        public string MiddleName { get; set; } // MiddleName

        [Column(@"LastName", Order = 6, TypeName = "varchar(max)")]
        [Display(Name = "Last name")]
        public string LastName { get; set; } // LastName

        [Column(@"Grade", Order = 7, TypeName = "varchar(max)")]
        [Display(Name = "Grade")]
        public string Grade { get; set; } // Grade

        [Column(@"DateOfBirth", Order = 8, TypeName = "varchar(max)")]
        [Display(Name = "Date of birth")]
        public string DateOfBirth { get; set; } // DateOfBirth

        [Column(@"School", Order = 9, TypeName = "varchar(max)")]
        [Display(Name = "School")]
        public string School { get; set; } // School

        [Column(@"ModifiedById", Order = 10, TypeName = "int")]
        [Display(Name = "Modified by ID")]
        public int? ModifiedById { get; set; } // ModifiedById

        [Column(@"DateCreated", Order = 11, TypeName = "datetime")]
        [Display(Name = "Date created")]
        public System.DateTime DateCreated { get; set; } // DateCreated

        [Column(@"DateModified", Order = 12, TypeName = "datetime")]
        [Display(Name = "Date modified")]
        public System.DateTime? DateModified { get; set; } // DateModified

        [Column(@"ProviderCaseUploadDocumentId", Order = 13, TypeName = "int")]
        [Display(Name = "Provider case upload document ID")]
        public int ProviderCaseUploadDocumentId { get; set; } // ProviderCaseUploadDocumentId

        [Column(@"HasDuplicates", Order = 14, TypeName = "bit")]
        [Display(Name = "Has duplicates")]
        public bool? HasDuplicates { get; set; } // HasDuplicates

        [Column(@"HasDataIssues", Order = 15, TypeName = "bit")]
        [Display(Name = "Has data issues")]
        public bool? HasDataIssues { get; set; } // HasDataIssues

        [Column(@"Archived", Order = 16, TypeName = "bit")]
        [Display(Name = "Archived")]
        public bool Archived { get; set; } // Archived

        [Column(@"StudentId", Order = 17, TypeName = "int")]
        [Display(Name = "Student ID")]
        public int? StudentId { get; set; } // StudentId

        // Foreign keys

        /// <summary>
        /// Parent SchoolDistrict pointed by [ProviderCaseUploads].([DistrictId]) (FK_ProviderCaseUploads_SchoolDistricts)
        /// </summary>
        [InverseProperty("ProviderCaseUploads")]
        [ForeignKey("DistrictId")] public SchoolDistrict SchoolDistrict { get; set; } // FK_ProviderCaseUploads_SchoolDistricts

        /// <summary>
        /// Parent User pointed by [ProviderCaseUploads].([ModifiedById]) (FK_ProviderCaseUploads_ModifiedBy)
        /// </summary>
        [InverseProperty("ProviderCaseUploads")]
        [ForeignKey("ModifiedById")] public User User { get; set; } // FK_ProviderCaseUploads_ModifiedBy

        /// <summary>
        /// Parent ProviderCaseUploadDocument pointed by [ProviderCaseUploads].([ProviderCaseUploadDocumentId]) (FK_ProviderCaseUploads_ProviderCaseUploadDocuments)
        /// </summary>
        [InverseProperty("ProviderCaseUploads")]
        [ForeignKey("ProviderCaseUploadDocumentId")] public ProviderCaseUploadDocument ProviderCaseUploadDocument { get; set; } // FK_ProviderCaseUploads_ProviderCaseUploadDocuments

        /// <summary>
        /// Parent Provider pointed by [ProviderCaseUploads].([ProviderId]) (FK_ProviderCaseUploads_Providers)
        /// </summary>
        [InverseProperty("ProviderCaseUploads")]
        [ForeignKey("ProviderId")] public Provider Provider { get; set; } // FK_ProviderCaseUploads_Providers

        /// <summary>
        /// Parent Student pointed by [ProviderCaseUploads].([StudentId]) (FK_ProviderCaseUploads_Students)
        /// </summary>
        [InverseProperty("ProviderCaseUploads")]
        [ForeignKey("StudentId")] public Student Student { get; set; } // FK_ProviderCaseUploads_Students

        public ProviderCaseUpload()
        {
            DateCreated = System.DateTime.UtcNow;
            HasDuplicates = false;
            HasDataIssues = false;
            Archived = false;
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>
