// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Model
{
    using Newtonsoft.Json;
    using System;
    using System.ComponentModel.DataAnnotations;
    using System.Data.SqlClient;
    using TrackerEnabledDbContext;

    // Goals
    [Table("Goals", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.0.0")]
    public partial class Goal: IEntity
    {
        // Goal

        ///<summary>
        /// Module
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"Id", Order = 1, TypeName = "int")]
        [Index(@"PK_Goals", 1, IsUnique = true, IsClustered = true)]
        [Key]
        [Display(Name = "Id")]
        public int Id { get; set; } // Id (Primary key)

        [Column(@"Description", Order = 2, TypeName = "varchar")]
        [MaxLength(500)]
        [StringLength(500)]
        [Display(Name = "Description")]
        public string Description { get; set; } // Description (length: 500)

        [Column(@"Archived", Order = 3, TypeName = "bit")]
        [Display(Name = "Archived")]
        public bool Archived { get; set; } // Archived

        [Column(@"CreatedById", Order = 4, TypeName = "int")]
        [Display(Name = "Created by ID")]
        public int CreatedById { get; set; } // CreatedById

        [Column(@"ModifiedById", Order = 5, TypeName = "int")]
        [Display(Name = "Modified by ID")]
        public int? ModifiedById { get; set; } // ModifiedById

        [Column(@"DateCreated", Order = 6, TypeName = "datetime")]
        [Display(Name = "Date created")]
        public System.DateTime? DateCreated { get; set; } // DateCreated

        [Column(@"DateModified", Order = 7, TypeName = "datetime")]
        [Display(Name = "Date modified")]
        public System.DateTime? DateModified { get; set; } // DateModified

        [Column(@"NursingResponseId", Order = 8, TypeName = "int")]
        [Display(Name = "Nursing response ID")]
        public int? NursingResponseId { get; set; } // NursingResponseId

        // Reverse navigation

        /// <summary>
        /// Child CaseLoadGoals where [CaseLoadGoals].[GoalId] point to this entity (FK_CaseLoadGoals_Goal)
        /// </summary>
        public System.Collections.Generic.ICollection<CaseLoadGoal> CaseLoadGoals { get; set; } // CaseLoadGoals.FK_CaseLoadGoals_Goal
        /// <summary>
        /// Child CaseLoadScriptGoals where [CaseLoadScriptGoals].[GoalId] point to this entity (FK_CaseLoadScriptGoals_Goal)
        /// </summary>
        public System.Collections.Generic.ICollection<CaseLoadScriptGoal> CaseLoadScriptGoals { get; set; } // CaseLoadScriptGoals.FK_CaseLoadScriptGoals_Goal
        /// <summary>
        /// Child EncounterStudentGoals where [EncounterStudentGoals].[GoalId] point to this entity (FK_EncounterStudentGoals_Goal)
        /// </summary>
        public System.Collections.Generic.ICollection<EncounterStudentGoal> EncounterStudentGoals { get; set; } // EncounterStudentGoals.FK_EncounterStudentGoals_Goal
        /// <summary>
        /// Child ServiceCodes (Many-to-Many) mapped by table [GoalServiceCodes]
        /// </summary>
        public System.Collections.Generic.ICollection<ServiceCode> ServiceCodes { get; set; } // Many to many mapping
        /// <summary>
        /// Child ServiceOutcomes where [ServiceOutcomes].[GoalId] point to this entity (FK_ServiceOutcomes_Goal)
        /// </summary>
        public System.Collections.Generic.ICollection<ServiceOutcome> ServiceOutcomes { get; set; } // ServiceOutcomes.FK_ServiceOutcomes_Goal

        // Foreign keys

        /// <summary>
        /// Parent User pointed by [Goals].([CreatedById]) (FK_Goals_CreatedBy)
        /// </summary>
        [InverseProperty("Goals_CreatedById")]
        [ForeignKey("CreatedById")] public User CreatedBy { get; set; } // FK_Goals_CreatedBy

        /// <summary>
        /// Parent User pointed by [Goals].([ModifiedById]) (FK_Goals_ModifiedBy)
        /// </summary>
        [InverseProperty("Goals_ModifiedById")]
        [ForeignKey("ModifiedById")] public User ModifiedBy { get; set; } // FK_Goals_ModifiedBy

        /// <summary>
        /// Parent NursingGoalResponse pointed by [Goals].([NursingResponseId]) (FK_Goals_NursingGoalResponse)
        /// </summary>
        [InverseProperty("Goals")]
        [ForeignKey("NursingResponseId")] public NursingGoalResponse NursingGoalResponse { get; set; } // FK_Goals_NursingGoalResponse

        public Goal()
        {
            Archived = false;
            CreatedById = 1;
            DateCreated = System.DateTime.UtcNow;
            EncounterStudentGoals = new System.Collections.Generic.List<EncounterStudentGoal>();
            ServiceOutcomes = new System.Collections.Generic.List<ServiceOutcome>();
            CaseLoadGoals = new System.Collections.Generic.List<CaseLoadGoal>();
            CaseLoadScriptGoals = new System.Collections.Generic.List<CaseLoadScriptGoal>();
            ServiceCodes = new System.Collections.Generic.List<ServiceCode>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>
