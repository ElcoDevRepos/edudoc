// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Model
{
    using Newtonsoft.Json;
    using System;
    using System.ComponentModel.DataAnnotations;
    using System.Data.SqlClient;
    using TrackerEnabledDbContext;

    // TherapyCaseNotes
    [Table("TherapyCaseNotes", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.0.0")]
    public partial class TherapyCaseNote: IEntity
    {
        // TherapyCaseNote
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"Id", Order = 1, TypeName = "int")]
        [Index(@"PK_TherapyCaseNotes", 1, IsUnique = true, IsClustered = true)]
        [Key]
        [Display(Name = "Id")]
        public int Id { get; set; } // Id (Primary key)

        [Column(@"Notes", Order = 2, TypeName = "varchar")]
        [MaxLength(6000)]
        [StringLength(6000)]
        [Display(Name = "Notes")]
        public string Notes { get; set; } // Notes (length: 6000)

        [Column(@"CreatedById", Order = 3, TypeName = "int")]
        [Display(Name = "Created by ID")]
        public int CreatedById { get; set; } // CreatedById

        [Column(@"ProviderId", Order = 4, TypeName = "int")]
        [Index(@"IX_TherapyCaseNotes_ProviderId", 1, IsUnique = false, IsClustered = false)]
        [Display(Name = "Provider ID")]
        public int ProviderId { get; set; } // ProviderId

        [Column(@"DateCreated", Order = 5, TypeName = "datetime")]
        [Display(Name = "Date created")]
        public System.DateTime DateCreated { get; set; } // DateCreated

        // Foreign keys

        /// <summary>
        /// Parent User pointed by [TherapyCaseNotes].([CreatedById]) (FK_TherapyCaseNotes_User)
        /// </summary>
        [InverseProperty("TherapyCaseNotes")]
        [ForeignKey("CreatedById")] public User User { get; set; } // FK_TherapyCaseNotes_User

        /// <summary>
        /// Parent Provider pointed by [TherapyCaseNotes].([ProviderId]) (FK_TherapyCaseNotes_Provider)
        /// </summary>
        [InverseProperty("TherapyCaseNotes")]
        [ForeignKey("ProviderId")] public Provider Provider { get; set; } // FK_TherapyCaseNotes_Provider

        public TherapyCaseNote()
        {
            CreatedById = 1;
            DateCreated = System.DateTime.UtcNow;
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>
