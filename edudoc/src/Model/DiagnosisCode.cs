// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Model
{
    using Newtonsoft.Json;
    using System;
    using System.ComponentModel.DataAnnotations;
    using System.Data.SqlClient;
    using TrackerEnabledDbContext;

    // DiagnosisCodes
    [Table("DiagnosisCodes", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.0.0")]
    public partial class DiagnosisCode: IEntity
    {
        // DiagnosisCode

        ///<summary>
        /// Module
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"Id", Order = 1, TypeName = "int")]
        [Index(@"PK_DiagnosisCodes", 1, IsUnique = true, IsClustered = true)]
        [Key]
        [Display(Name = "Id")]
        public int Id { get; set; } // Id (Primary key)

        [Column(@"Code", Order = 2, TypeName = "varchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Code")]
        public string Code { get; set; } // Code (length: 50)

        [Column(@"Description", Order = 3, TypeName = "varchar")]
        [MaxLength(250)]
        [StringLength(250)]
        [Display(Name = "Description")]
        public string Description { get; set; } // Description (length: 250)

        [Column(@"EffectiveDateFrom", Order = 4, TypeName = "datetime")]
        [Display(Name = "Effective date from")]
        public System.DateTime? EffectiveDateFrom { get; set; } // EffectiveDateFrom

        [Column(@"EffectiveDateTo", Order = 5, TypeName = "datetime")]
        [Display(Name = "Effective date to")]
        public System.DateTime? EffectiveDateTo { get; set; } // EffectiveDateTo

        [Column(@"Archived", Order = 6, TypeName = "bit")]
        [Display(Name = "Archived")]
        public bool Archived { get; set; } // Archived

        [Column(@"CreatedById", Order = 7, TypeName = "int")]
        [Display(Name = "Created by ID")]
        public int CreatedById { get; set; } // CreatedById

        [Column(@"ModifiedById", Order = 8, TypeName = "int")]
        [Display(Name = "Modified by ID")]
        public int? ModifiedById { get; set; } // ModifiedById

        [Column(@"DateCreated", Order = 9, TypeName = "datetime")]
        [Display(Name = "Date created")]
        public System.DateTime? DateCreated { get; set; } // DateCreated

        [Column(@"DateModified", Order = 10, TypeName = "datetime")]
        [Display(Name = "Date modified")]
        public System.DateTime? DateModified { get; set; } // DateModified

        // Reverse navigation

        /// <summary>
        /// Child CaseLoads where [CaseLoads].[DiagnosisCodeId] point to this entity (FK_CaseLoads_DiagnosisCodes)
        /// </summary>
        public System.Collections.Generic.ICollection<CaseLoad> CaseLoads { get; set; } // CaseLoads.FK_CaseLoads_DiagnosisCodes
        /// <summary>
        /// Child CaseLoadScripts where [CaseLoadScripts].[DiagnosisCodeId] point to this entity (FK_CaseLoadScripts_DiagnosisCodes)
        /// </summary>
        public System.Collections.Generic.ICollection<CaseLoadScript> CaseLoadScripts { get; set; } // CaseLoadScripts.FK_CaseLoadScripts_DiagnosisCodes
        /// <summary>
        /// Child DiagnosisCodeAssociations where [DiagnosisCodeAssociations].[DiagnosisCodeId] point to this entity (FK_DiagnosisCodeAssociations_DiagnosisCodes)
        /// </summary>
        public System.Collections.Generic.ICollection<DiagnosisCodeAssociation> DiagnosisCodeAssociations { get; set; } // DiagnosisCodeAssociations.FK_DiagnosisCodeAssociations_DiagnosisCodes
        /// <summary>
        /// Child Encounters where [Encounters].[DiagnosisCodeId] point to this entity (FK_Encounters_DiagnosisCodes)
        /// </summary>
        public System.Collections.Generic.ICollection<Encounter> Encounters { get; set; } // Encounters.FK_Encounters_DiagnosisCodes
        /// <summary>
        /// Child EncounterStudents where [EncounterStudents].[DiagnosisCodeId] point to this entity (FK_EncounterStudents_DiagnosisCodes)
        /// </summary>
        public System.Collections.Generic.ICollection<EncounterStudent> EncounterStudents { get; set; } // EncounterStudents.FK_EncounterStudents_DiagnosisCodes
        /// <summary>
        /// Child EvaluationTypesDiagnosisCodes where [EvaluationTypesDiagnosisCodes].[DiagnosisCodeId] point to this entity (FK_EvaluationTypesDiagnosisCodes_DiagnosisCodes)
        /// </summary>
        public System.Collections.Generic.ICollection<EvaluationTypesDiagnosisCode> EvaluationTypesDiagnosisCodes { get; set; } // EvaluationTypesDiagnosisCodes.FK_EvaluationTypesDiagnosisCodes_DiagnosisCodes

        // Foreign keys

        /// <summary>
        /// Parent User pointed by [DiagnosisCodes].([CreatedById]) (FK_DiagnosisCodes_CreatedBy)
        /// </summary>
        [InverseProperty("DiagnosisCodes_CreatedById")]
        [ForeignKey("CreatedById")] public User CreatedBy { get; set; } // FK_DiagnosisCodes_CreatedBy

        /// <summary>
        /// Parent User pointed by [DiagnosisCodes].([ModifiedById]) (FK_DiagnosisCodes_ModifiedBy)
        /// </summary>
        [InverseProperty("DiagnosisCodes_ModifiedById")]
        [ForeignKey("ModifiedById")] public User ModifiedBy { get; set; } // FK_DiagnosisCodes_ModifiedBy

        public DiagnosisCode()
        {
            Archived = false;
            CreatedById = 1;
            DateCreated = System.DateTime.UtcNow;
            Encounters = new System.Collections.Generic.List<Encounter>();
            EncounterStudents = new System.Collections.Generic.List<EncounterStudent>();
            EvaluationTypesDiagnosisCodes = new System.Collections.Generic.List<EvaluationTypesDiagnosisCode>();
            CaseLoads = new System.Collections.Generic.List<CaseLoad>();
            CaseLoadScripts = new System.Collections.Generic.List<CaseLoadScript>();
            DiagnosisCodeAssociations = new System.Collections.Generic.List<DiagnosisCodeAssociation>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>
