// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Model
{
    using Newtonsoft.Json;
    using System;
    using System.ComponentModel.DataAnnotations;
    using System.Data.SqlClient;
    using TrackerEnabledDbContext;

    // TherapyGroups
    [Table("TherapyGroups", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.0.0")]
    public partial class TherapyGroup: IEntity, IBasicNameEntity
    {
        // TherapyGroup
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"Id", Order = 1, TypeName = "int")]
        [Index(@"PK_TherapyGroups", 1, IsUnique = true, IsClustered = true)]
        [Key]
        [Display(Name = "Id")]
        public int Id { get; set; } // Id (Primary key)

        [Column(@"Name", Order = 2, TypeName = "varchar")]
        [MaxLength(300)]
        [StringLength(300)]
        [Display(Name = "Name")]
        public string Name { get; set; } // Name (length: 300)

        [Column(@"ProviderId", Order = 3, TypeName = "int")]
        [Display(Name = "Provider ID")]
        public int ProviderId { get; set; } // ProviderId

        [Column(@"StartDate", Order = 4, TypeName = "datetime")]
        [Display(Name = "Start date")]
        public System.DateTime StartDate { get; set; } // StartDate

        [Column(@"EndDate", Order = 5, TypeName = "datetime")]
        [Display(Name = "End date")]
        public System.DateTime EndDate { get; set; } // EndDate

        [Column(@"Monday", Order = 6, TypeName = "bit")]
        [Display(Name = "Monday")]
        public bool Monday { get; set; } // Monday

        [Column(@"Tuesday", Order = 7, TypeName = "bit")]
        [Display(Name = "Tuesday")]
        public bool Tuesday { get; set; } // Tuesday

        [Column(@"Wednesday", Order = 8, TypeName = "bit")]
        [Display(Name = "Wednesday")]
        public bool Wednesday { get; set; } // Wednesday

        [Column(@"Thursday", Order = 9, TypeName = "bit")]
        [Display(Name = "Thursday")]
        public bool Thursday { get; set; } // Thursday

        [Column(@"Friday", Order = 10, TypeName = "bit")]
        [Display(Name = "Friday")]
        public bool Friday { get; set; } // Friday

        [Column(@"Archived", Order = 11, TypeName = "bit")]
        [Display(Name = "Archived")]
        public bool Archived { get; set; } // Archived

        [Column(@"CreatedById", Order = 12, TypeName = "int")]
        [Display(Name = "Created by ID")]
        public int CreatedById { get; set; } // CreatedById

        [Column(@"ModifiedById", Order = 13, TypeName = "int")]
        [Display(Name = "Modified by ID")]
        public int? ModifiedById { get; set; } // ModifiedById

        [Column(@"DateCreated", Order = 14, TypeName = "datetime")]
        [Display(Name = "Date created")]
        public System.DateTime DateCreated { get; set; } // DateCreated

        [Column(@"DateModified", Order = 15, TypeName = "datetime")]
        [Display(Name = "Date modified")]
        public System.DateTime? DateModified { get; set; } // DateModified

        // Reverse navigation

        /// <summary>
        /// Child StudentTherapies where [StudentTherapies].[TherapyGroupId] point to this entity (FK_StudentTherapies_TherapyGroup)
        /// </summary>
        public System.Collections.Generic.ICollection<StudentTherapy> StudentTherapies { get; set; } // StudentTherapies.FK_StudentTherapies_TherapyGroup

        // Foreign keys

        /// <summary>
        /// Parent User pointed by [TherapyGroups].([CreatedById]) (FK_TherapyGroups_CreatedBy)
        /// </summary>
        [InverseProperty("TherapyGroups_CreatedById")]
        [ForeignKey("CreatedById")] public User CreatedBy { get; set; } // FK_TherapyGroups_CreatedBy

        /// <summary>
        /// Parent User pointed by [TherapyGroups].([ModifiedById]) (FK_TherapyGroups_ModifiedBy)
        /// </summary>
        [InverseProperty("TherapyGroups_ModifiedById")]
        [ForeignKey("ModifiedById")] public User ModifiedBy { get; set; } // FK_TherapyGroups_ModifiedBy

        /// <summary>
        /// Parent Provider pointed by [TherapyGroups].([ProviderId]) (FK_TherapyGroups_Provider)
        /// </summary>
        [InverseProperty("TherapyGroups")]
        [ForeignKey("ProviderId")] public Provider Provider { get; set; } // FK_TherapyGroups_Provider

        public TherapyGroup()
        {
            StartDate = System.DateTime.UtcNow;
            EndDate = System.DateTime.UtcNow;
            Monday = false;
            Tuesday = false;
            Wednesday = false;
            Thursday = false;
            Friday = false;
            Archived = false;
            CreatedById = 1;
            StudentTherapies = new System.Collections.Generic.List<StudentTherapy>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>
