// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Model
{
    using Newtonsoft.Json;
    using System;
    using System.ComponentModel.DataAnnotations;
    using System.Data.SqlClient;
    using TrackerEnabledDbContext;

    // Students
    [Table("Students", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.0.0")]
    public partial class Student: IEntity
    {
        // Student

        ///<summary>
        /// Module
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"Id", Order = 1, TypeName = "int")]
        [Index(@"PK_Students", 1, IsUnique = true, IsClustered = true)]
        [Key]
        [Display(Name = "Id")]
        public int Id { get; set; } // Id (Primary key)

        [Column(@"FirstName", Order = 2, TypeName = "varchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "First name")]
        public string FirstName { get; set; } // FirstName (length: 50)

        [Column(@"MiddleName", Order = 3, TypeName = "varchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Middle name")]
        public string MiddleName { get; set; } // MiddleName (length: 50)

        [Column(@"LastName", Order = 4, TypeName = "varchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Last name")]
        public string LastName { get; set; } // LastName (length: 50)

        [Column(@"StudentCode", Order = 5, TypeName = "varchar")]
        [MaxLength(12)]
        [StringLength(12)]
        [Display(Name = "Student code")]
        public string StudentCode { get; set; } // StudentCode (length: 12)

        [Column(@"MedicaidNo", Order = 6, TypeName = "varchar")]
        [MaxLength(12)]
        [StringLength(12)]
        [Display(Name = "Medicaid no")]
        public string MedicaidNo { get; set; } // MedicaidNo (length: 12)

        [Column(@"Grade", Order = 7, TypeName = "varchar")]
        [MaxLength(2)]
        [StringLength(2)]
        [Display(Name = "Grade")]
        public string Grade { get; set; } // Grade (length: 2)

        [Column(@"DateOfBirth", Order = 8, TypeName = "datetime")]
        [Display(Name = "Date of birth")]
        public System.DateTime DateOfBirth { get; set; } // DateOfBirth

        [Column(@"Notes", Order = 9, TypeName = "varchar")]
        [MaxLength(250)]
        [StringLength(250)]
        [Display(Name = "Notes")]
        public string Notes { get; set; } // Notes (length: 250)

        [Column(@"AddressId", Order = 10, TypeName = "int")]
        [Display(Name = "Address ID")]
        public int? AddressId { get; set; } // AddressId

        [Column(@"SchoolId", Order = 11, TypeName = "int")]
        [Index(@"IX_Students_SchoolId_Archived", 1, IsUnique = false, IsClustered = false)]
        [Display(Name = "School ID")]
        public int SchoolId { get; set; } // SchoolId

        [Column(@"DistrictId", Order = 12, TypeName = "int")]
        [Index(@"IX_Students_DistrictId_Archived", 1, IsUnique = false, IsClustered = false)]
        [Display(Name = "District ID")]
        public int? DistrictId { get; set; } // DistrictId

        [Column(@"EnrollmentDate", Order = 13, TypeName = "datetime")]
        [Display(Name = "Enrollment date")]
        public System.DateTime? EnrollmentDate { get; set; } // EnrollmentDate

        [Column(@"EscId", Order = 14, TypeName = "int")]
        [Display(Name = "Esc ID")]
        public int? EscId { get; set; } // EscId

        [Column(@"CreatedById", Order = 15, TypeName = "int")]
        [Display(Name = "Created by ID")]
        public int CreatedById { get; set; } // CreatedById

        [Column(@"ModifiedById", Order = 16, TypeName = "int")]
        [Display(Name = "Modified by ID")]
        public int? ModifiedById { get; set; } // ModifiedById

        [Column(@"DateCreated", Order = 17, TypeName = "datetime")]
        [Display(Name = "Date created")]
        public System.DateTime? DateCreated { get; set; } // DateCreated

        [Column(@"DateModified", Order = 18, TypeName = "datetime")]
        [Display(Name = "Date modified")]
        public System.DateTime? DateModified { get; set; } // DateModified

        [Column(@"Archived", Order = 19, TypeName = "bit")]
        [Index(@"IX_Students_DistrictId_Archived", 2, IsUnique = false, IsClustered = false)]
        [Index(@"IX_Students_SchoolId_Archived", 2, IsUnique = false, IsClustered = false)]
        [Display(Name = "Archived")]
        public bool Archived { get; set; } // Archived

        // Reverse navigation

        /// <summary>
        /// Child CaseLoads where [CaseLoads].[StudentId] point to this entity (FK_CaseLoads_Student)
        /// </summary>
        public System.Collections.Generic.ICollection<CaseLoad> CaseLoads { get; set; } // CaseLoads.FK_CaseLoads_Student
        /// <summary>
        /// Child ClaimsStudents where [ClaimsStudents].[StudentId] point to this entity (FK_ClaimsStudents_Student)
        /// </summary>
        public System.Collections.Generic.ICollection<ClaimsStudent> ClaimsStudents { get; set; } // ClaimsStudents.FK_ClaimsStudents_Student
        /// <summary>
        /// Child EncounterStudents where [EncounterStudents].[StudentId] point to this entity (FK_EncounterStudents_Student)
        /// </summary>
        public System.Collections.Generic.ICollection<EncounterStudent> EncounterStudents { get; set; } // EncounterStudents.FK_EncounterStudents_Student
        /// <summary>
        /// Child IepServices where [IEPServices].[StudentId] point to this entity (FK_IEPServices_Student)
        /// </summary>
        public System.Collections.Generic.ICollection<IepService> IepServices { get; set; } // IEPServices.FK_IEPServices_Student
        /// <summary>
        /// Child MergedStudents where [MergedStudents].[MergedToStudentId] point to this entity (FK_MergedStudents_Students)
        /// </summary>
        public System.Collections.Generic.ICollection<MergedStudent> MergedStudents { get; set; } // MergedStudents.FK_MergedStudents_Students
        /// <summary>
        /// Child MigrationProviderCaseNotesHistories where [Migration_ProviderCaseNotesHistory].[StudentId] point to this entity (FK_Migration_ProviderCaseNotesHistory_Student)
        /// </summary>
        public System.Collections.Generic.ICollection<MigrationProviderCaseNotesHistory> MigrationProviderCaseNotesHistories { get; set; } // Migration_ProviderCaseNotesHistory.FK_Migration_ProviderCaseNotesHistory_Student
        /// <summary>
        /// Child PendingReferrals where [PendingReferrals].[StudentId] point to this entity (FK_PendingReferrals_Students)
        /// </summary>
        public System.Collections.Generic.ICollection<PendingReferral> PendingReferrals { get; set; } // PendingReferrals.FK_PendingReferrals_Students
        /// <summary>
        /// Child ProgressReports where [ProgressReports].[StudentId] point to this entity (FK_ProgressReports_Student)
        /// </summary>
        public System.Collections.Generic.ICollection<ProgressReport> ProgressReports { get; set; } // ProgressReports.FK_ProgressReports_Student
        /// <summary>
        /// Child ProviderCaseUploads where [ProviderCaseUploads].[StudentId] point to this entity (FK_ProviderCaseUploads_Students)
        /// </summary>
        public System.Collections.Generic.ICollection<ProviderCaseUpload> ProviderCaseUploads { get; set; } // ProviderCaseUploads.FK_ProviderCaseUploads_Students
        /// <summary>
        /// Child ProviderStudents where [ProviderStudents].[StudentId] point to this entity (FK_ProviderStudents_Students)
        /// </summary>
        public System.Collections.Generic.ICollection<ProviderStudent> ProviderStudents { get; set; } // ProviderStudents.FK_ProviderStudents_Students
        /// <summary>
        /// Child ProviderStudentHistories where [ProviderStudentHistories].[StudentId] point to this entity (FK_ProviderStudentHistories_Students)
        /// </summary>
        public System.Collections.Generic.ICollection<ProviderStudentHistory> ProviderStudentHistories { get; set; } // ProviderStudentHistories.FK_ProviderStudentHistories_Students
        /// <summary>
        /// Child ProviderStudentSupervisors where [ProviderStudentSupervisors].[StudentId] point to this entity (FK_ProviderStudentSupervisors_Students)
        /// </summary>
        public System.Collections.Generic.ICollection<ProviderStudentSupervisor> ProviderStudentSupervisors { get; set; } // ProviderStudentSupervisors.FK_ProviderStudentSupervisors_Students
        /// <summary>
        /// Child RosterValidationStudents where [RosterValidationStudents].[StudentId] point to this entity (FK_RosterValidationStudents_Student)
        /// </summary>
        public System.Collections.Generic.ICollection<RosterValidationStudent> RosterValidationStudents { get; set; } // RosterValidationStudents.FK_RosterValidationStudents_Student
        /// <summary>
        /// Child SchoolDistrictRosters where [SchoolDistrictRosters].[StudentId] point to this entity (FK_SchoolDistrictRosters_Students)
        /// </summary>
        public System.Collections.Generic.ICollection<SchoolDistrictRoster> SchoolDistrictRosters { get; set; } // SchoolDistrictRosters.FK_SchoolDistrictRosters_Students
        /// <summary>
        /// Child StudentDisabilityCodes where [StudentDisabilityCodes].[StudentId] point to this entity (FK_StudentDisabilityCodes_Student)
        /// </summary>
        public System.Collections.Generic.ICollection<StudentDisabilityCode> StudentDisabilityCodes { get; set; } // StudentDisabilityCodes.FK_StudentDisabilityCodes_Student
        /// <summary>
        /// Child StudentDistrictWithdrawals where [StudentDistrictWithdrawals].[StudentId] point to this entity (FK_StudentDistrictWithdrawals_Student)
        /// </summary>
        public System.Collections.Generic.ICollection<StudentDistrictWithdrawal> StudentDistrictWithdrawals { get; set; } // StudentDistrictWithdrawals.FK_StudentDistrictWithdrawals_Student
        /// <summary>
        /// Child StudentParentalConsents where [StudentParentalConsents].[StudentId] point to this entity (FK_StudentParentalConsents_Student)
        /// </summary>
        public System.Collections.Generic.ICollection<StudentParentalConsent> StudentParentalConsents { get; set; } // StudentParentalConsents.FK_StudentParentalConsents_Student
        /// <summary>
        /// Child SupervisorProviderStudentReferalSignOffs where [SupervisorProviderStudentReferalSignOffs].[StudentId] point to this entity (FK_SupervisorProviderStudentReferalSignOff_Student)
        /// </summary>
        public System.Collections.Generic.ICollection<SupervisorProviderStudentReferalSignOff> SupervisorProviderStudentReferalSignOffs { get; set; } // SupervisorProviderStudentReferalSignOffs.FK_SupervisorProviderStudentReferalSignOff_Student

        // Foreign keys

        /// <summary>
        /// Parent Address pointed by [Students].([AddressId]) (FK_Students_Addresses)
        /// </summary>
        [InverseProperty("Students")]
        [ForeignKey("AddressId")] public Address Address { get; set; } // FK_Students_Addresses

        /// <summary>
        /// Parent User pointed by [Students].([CreatedById]) (FK_Students_CreatedBy)
        /// </summary>
        [InverseProperty("Students_CreatedById")]
        [ForeignKey("CreatedById")] public User CreatedBy { get; set; } // FK_Students_CreatedBy

        /// <summary>
        /// Parent SchoolDistrict pointed by [Students].([DistrictId]) (FK_Students_SchoolDistrict)
        /// </summary>
        [InverseProperty("Students")]
        [ForeignKey("DistrictId")] public SchoolDistrict SchoolDistrict { get; set; } // FK_Students_SchoolDistrict

        /// <summary>
        /// Parent Esc pointed by [Students].([EscId]) (FK_Students_Esc)
        /// </summary>
        [InverseProperty("Students")]
        [ForeignKey("EscId")] public Esc Esc { get; set; } // FK_Students_Esc

        /// <summary>
        /// Parent User pointed by [Students].([ModifiedById]) (FK_Students_ModifiedBy)
        /// </summary>
        [InverseProperty("Students_ModifiedById")]
        [ForeignKey("ModifiedById")] public User ModifiedBy { get; set; } // FK_Students_ModifiedBy

        /// <summary>
        /// Parent School pointed by [Students].([SchoolId]) (FK_Students_School)
        /// </summary>
        [InverseProperty("Students")]
        [ForeignKey("SchoolId")] public School School { get; set; } // FK_Students_School

        public Student()
        {
            EnrollmentDate = System.DateTime.UtcNow;
            CreatedById = 1;
            DateCreated = System.DateTime.UtcNow;
            Archived = false;
            ProgressReports = new System.Collections.Generic.List<ProgressReport>();
            ProviderStudents = new System.Collections.Generic.List<ProviderStudent>();
            ProviderStudentSupervisors = new System.Collections.Generic.List<ProviderStudentSupervisor>();
            EncounterStudents = new System.Collections.Generic.List<EncounterStudent>();
            RosterValidationStudents = new System.Collections.Generic.List<RosterValidationStudent>();
            SchoolDistrictRosters = new System.Collections.Generic.List<SchoolDistrictRoster>();
            ProviderStudentHistories = new System.Collections.Generic.List<ProviderStudentHistory>();
            IepServices = new System.Collections.Generic.List<IepService>();
            MergedStudents = new System.Collections.Generic.List<MergedStudent>();
            StudentDisabilityCodes = new System.Collections.Generic.List<StudentDisabilityCode>();
            CaseLoads = new System.Collections.Generic.List<CaseLoad>();
            StudentDistrictWithdrawals = new System.Collections.Generic.List<StudentDistrictWithdrawal>();
            StudentParentalConsents = new System.Collections.Generic.List<StudentParentalConsent>();
            MigrationProviderCaseNotesHistories = new System.Collections.Generic.List<MigrationProviderCaseNotesHistory>();
            SupervisorProviderStudentReferalSignOffs = new System.Collections.Generic.List<SupervisorProviderStudentReferalSignOff>();
            PendingReferrals = new System.Collections.Generic.List<PendingReferral>();
            ClaimsStudents = new System.Collections.Generic.List<ClaimsStudent>();
            ProviderCaseUploads = new System.Collections.Generic.List<ProviderCaseUpload>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>
