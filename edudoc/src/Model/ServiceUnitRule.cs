// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Model
{
    using Newtonsoft.Json;
    using System;
    using System.ComponentModel.DataAnnotations;
    using System.Data.SqlClient;
    using TrackerEnabledDbContext;

    // ServiceUnitRules
    [Table("ServiceUnitRules", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.0.0")]
    public partial class ServiceUnitRule: IEntity, IBasicNameEntity
    {
        // ServiceUnitRule
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"Id", Order = 1, TypeName = "int")]
        [Index(@"PK_ServiceUnitRules", 1, IsUnique = true, IsClustered = true)]
        [Key]
        [Display(Name = "Id")]
        public int Id { get; set; } // Id (Primary key)

        [Column(@"Name", Order = 2, TypeName = "varchar")]
        [MaxLength(100)]
        [StringLength(100)]
        [Display(Name = "Name")]
        public string Name { get; set; } // Name (length: 100)

        [Column(@"Description", Order = 3, TypeName = "varchar")]
        [MaxLength(200)]
        [StringLength(200)]
        [Display(Name = "Description")]
        public string Description { get; set; } // Description (length: 200)

        [Column(@"CptCodeId", Order = 4, TypeName = "int")]
        [Display(Name = "Cpt code ID")]
        public int? CptCodeId { get; set; } // CptCodeId

        [Column(@"EffectiveDate", Order = 5, TypeName = "datetime")]
        [Display(Name = "Effective date")]
        public System.DateTime? EffectiveDate { get; set; } // EffectiveDate

        [Column(@"HasReplacement", Order = 6, TypeName = "bit")]
        [Display(Name = "Has replacement")]
        public bool HasReplacement { get; set; } // HasReplacement

        [Column(@"CreatedById", Order = 7, TypeName = "int")]
        [Display(Name = "Created by ID")]
        public int? CreatedById { get; set; } // CreatedById

        [Column(@"ModifiedById", Order = 8, TypeName = "int")]
        [Display(Name = "Modified by ID")]
        public int? ModifiedById { get; set; } // ModifiedById

        [Column(@"DateCreated", Order = 9, TypeName = "datetime")]
        [Display(Name = "Date created")]
        public System.DateTime? DateCreated { get; set; } // DateCreated

        [Column(@"DateModified", Order = 10, TypeName = "datetime")]
        [Display(Name = "Date modified")]
        public System.DateTime? DateModified { get; set; } // DateModified

        [Column(@"Archived", Order = 11, TypeName = "bit")]
        [Display(Name = "Archived")]
        public bool Archived { get; set; } // Archived

        // Reverse navigation

        /// <summary>
        /// Child CptCodes where [CPTCodes].[ServiceUnitRuleId] point to this entity (FK_CPTCodes_ServiceUnitRule)
        /// </summary>
        public System.Collections.Generic.ICollection<CptCode> CptCodes { get; set; } // CPTCodes.FK_CPTCodes_ServiceUnitRule
        /// <summary>
        /// Child ServiceUnitTimeSegments where [ServiceUnitTimeSegments].[ServiceUnitRuleId] point to this entity (FK_ServiceUnitTimeSegments_ServiceUnitRule)
        /// </summary>
        public System.Collections.Generic.ICollection<ServiceUnitTimeSegment> ServiceUnitTimeSegments { get; set; } // ServiceUnitTimeSegments.FK_ServiceUnitTimeSegments_ServiceUnitRule

        // Foreign keys

        /// <summary>
        /// Parent CptCode pointed by [ServiceUnitRules].([CptCodeId]) (FK_ServiceUnitRules_CptCode)
        /// </summary>
        [InverseProperty("ServiceUnitRules")]
        [ForeignKey("CptCodeId")] public CptCode CptCode { get; set; } // FK_ServiceUnitRules_CptCode

        /// <summary>
        /// Parent User pointed by [ServiceUnitRules].([CreatedById]) (FK_ServiceUnitRules_CreatedBy)
        /// </summary>
        [InverseProperty("ServiceUnitRules_CreatedById")]
        [ForeignKey("CreatedById")] public User CreatedBy { get; set; } // FK_ServiceUnitRules_CreatedBy

        /// <summary>
        /// Parent User pointed by [ServiceUnitRules].([ModifiedById]) (FK_ServiceUnitRules_ModifiedBy)
        /// </summary>
        [InverseProperty("ServiceUnitRules_ModifiedById")]
        [ForeignKey("ModifiedById")] public User ModifiedBy { get; set; } // FK_ServiceUnitRules_ModifiedBy

        public ServiceUnitRule()
        {
            HasReplacement = false;
            DateCreated = System.DateTime.UtcNow;
            Archived = false;
            ServiceUnitTimeSegments = new System.Collections.Generic.List<ServiceUnitTimeSegment>();
            CptCodes = new System.Collections.Generic.List<CptCode>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>
