// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Model
{
    using Newtonsoft.Json;
    using System;
    using System.ComponentModel.DataAnnotations;
    using System.Data.SqlClient;
    using TrackerEnabledDbContext;

    // Addresses
    [Table("Addresses", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.0.0")]
    public partial class Address: IEntity, IAddress
    {
        // Address
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"Id", Order = 1, TypeName = "int")]
        [Index(@"PK_Addresses", 1, IsUnique = true, IsClustered = true)]
        [Key]
        [Display(Name = "Id")]
        public int Id { get; set; } // Id (Primary key)

        [Column(@"Address1", Order = 2, TypeName = "nvarchar")]
        [MaxLength(250)]
        [StringLength(250)]
        [Display(Name = "Address 1")]
        public string Address1 { get; set; } // Address1 (length: 250)

        [Column(@"Address2", Order = 3, TypeName = "nvarchar")]
        [MaxLength(250)]
        [StringLength(250)]
        [Display(Name = "Address 2")]
        public string Address2 { get; set; } // Address2 (length: 250)

        [Column(@"City", Order = 4, TypeName = "nvarchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "City")]
        public string City { get; set; } // City (length: 50)

        [Column(@"StateCode", Order = 5, TypeName = "char")]
        [MaxLength(2)]
        [StringLength(2)]
        [Display(Name = "State code")]
        public string StateCode { get; set; } // StateCode (length: 2)

        [Column(@"Zip", Order = 6, TypeName = "nvarchar")]
        [MaxLength(20)]
        [StringLength(20)]
        [Display(Name = "Zip")]
        public string Zip { get; set; } // Zip (length: 20)

        [Column(@"CountryCode", Order = 7, TypeName = "char")]
        [MaxLength(2)]
        [StringLength(2)]
        [Display(Name = "Country code")]
        public string CountryCode { get; set; } // CountryCode (length: 2)

        [Column(@"Province", Order = 8, TypeName = "nvarchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Province")]
        public string Province { get; set; } // Province (length: 50)

        [Column(@"County", Order = 9, TypeName = "varchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "County")]
        public string County { get; set; } // County (length: 50)

        // Reverse navigation

        /// <summary>
        /// Child Contacts where [Contacts].[AddressId] point to this entity (FK_Contacts_Addresses)
        /// </summary>
        public System.Collections.Generic.ICollection<Contact> Contacts { get; set; } // Contacts.FK_Contacts_Addresses
        /// <summary>
        /// Child Escs where [Escs].[AddressId] point to this entity (FK_Escs_Addresses)
        /// </summary>
        public System.Collections.Generic.ICollection<Esc> Escs { get; set; } // Escs.FK_Escs_Addresses
        /// <summary>
        /// Child MergedStudents where [MergedStudents].[AddressId] point to this entity (FK_MergedStudents_Addresses)
        /// </summary>
        public System.Collections.Generic.ICollection<MergedStudent> MergedStudents { get; set; } // MergedStudents.FK_MergedStudents_Addresses
        /// <summary>
        /// Child SchoolDistricts where [SchoolDistricts].[AddressId] point to this entity (FK_SchoolDistricts_Addresses)
        /// </summary>
        public System.Collections.Generic.ICollection<SchoolDistrict> SchoolDistricts { get; set; } // SchoolDistricts.FK_SchoolDistricts_Addresses
        /// <summary>
        /// Child Students where [Students].[AddressId] point to this entity (FK_Students_Addresses)
        /// </summary>
        public System.Collections.Generic.ICollection<Student> Students { get; set; } // Students.FK_Students_Addresses
        /// <summary>
        /// Child Users where [Users].[AddressId] point to this entity (FK_Users_Addresses)
        /// </summary>
        public System.Collections.Generic.ICollection<User> Users { get; set; } // Users.FK_Users_Addresses

        // Foreign keys

        /// <summary>
        /// Parent Country pointed by [Addresses].([CountryCode]) (FK_Addresses_Countries)
        /// </summary>
        [InverseProperty("Addresses")]
        [ForeignKey("CountryCode")] public Country Country { get; set; } // FK_Addresses_Countries

        /// <summary>
        /// Parent State pointed by [Addresses].([StateCode]) (FK_Addresses_States)
        /// </summary>
        [InverseProperty("Addresses")]
        [ForeignKey("StateCode")] public State State { get; set; } // FK_Addresses_States

        public Address()
        {
            Address1 = "";
            Address2 = "";
            City = "";
            StateCode = "";
            Zip = "";
            Province = "";
            SchoolDistricts = new System.Collections.Generic.List<SchoolDistrict>();
            Escs = new System.Collections.Generic.List<Esc>();
            MergedStudents = new System.Collections.Generic.List<MergedStudent>();
            Students = new System.Collections.Generic.List<Student>();
            Contacts = new System.Collections.Generic.List<Contact>();
            Users = new System.Collections.Generic.List<User>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>
