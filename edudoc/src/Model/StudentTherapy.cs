// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Model
{
    using Newtonsoft.Json;
    using System;
    using System.ComponentModel.DataAnnotations;
    using System.Data.SqlClient;
    using TrackerEnabledDbContext;

    // StudentTherapies
    [Table("StudentTherapies", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.0.0")]
    public partial class StudentTherapy: IEntity
    {
        // StudentTherapy
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"Id", Order = 1, TypeName = "int")]
        [Index(@"PK_StudentTherapies", 1, IsUnique = true, IsClustered = true)]
        [Key]
        [Display(Name = "Id")]
        public int Id { get; set; } // Id (Primary key)

        [Column(@"CaseLoadId", Order = 2, TypeName = "int")]
        [Display(Name = "Case load ID")]
        public int CaseLoadId { get; set; } // CaseLoadId

        [Column(@"ProviderId", Order = 3, TypeName = "int")]
        [Display(Name = "Provider ID")]
        public int? ProviderId { get; set; } // ProviderId

        [Column(@"EncounterLocationId", Order = 4, TypeName = "int")]
        [Display(Name = "Encounter location ID")]
        public int EncounterLocationId { get; set; } // EncounterLocationId

        [Column(@"TherapyGroupId", Order = 5, TypeName = "int")]
        [Display(Name = "Therapy group ID")]
        public int? TherapyGroupId { get; set; } // TherapyGroupId

        [Column(@"StartDate", Order = 6, TypeName = "datetime")]
        [Display(Name = "Start date")]
        public System.DateTime StartDate { get; set; } // StartDate

        [Column(@"EndDate", Order = 7, TypeName = "datetime")]
        [Display(Name = "End date")]
        public System.DateTime EndDate { get; set; } // EndDate

        [Column(@"Monday", Order = 8, TypeName = "bit")]
        [Display(Name = "Monday")]
        public bool Monday { get; set; } // Monday

        [Column(@"Tuesday", Order = 9, TypeName = "bit")]
        [Display(Name = "Tuesday")]
        public bool Tuesday { get; set; } // Tuesday

        [Column(@"Wednesday", Order = 10, TypeName = "bit")]
        [Display(Name = "Wednesday")]
        public bool Wednesday { get; set; } // Wednesday

        [Column(@"Thursday", Order = 11, TypeName = "bit")]
        [Display(Name = "Thursday")]
        public bool Thursday { get; set; } // Thursday

        [Column(@"Friday", Order = 12, TypeName = "bit")]
        [Display(Name = "Friday")]
        public bool Friday { get; set; } // Friday

        [Column(@"SessionName", Order = 13, TypeName = "varchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Session name")]
        public string SessionName { get; set; } // SessionName (length: 50)

        [Column(@"Archived", Order = 14, TypeName = "bit")]
        [Display(Name = "Archived")]
        public bool Archived { get; set; } // Archived

        [Column(@"CreatedById", Order = 15, TypeName = "int")]
        [Display(Name = "Created by ID")]
        public int CreatedById { get; set; } // CreatedById

        [Column(@"ModifiedById", Order = 16, TypeName = "int")]
        [Display(Name = "Modified by ID")]
        public int? ModifiedById { get; set; } // ModifiedById

        [Column(@"DateCreated", Order = 17, TypeName = "datetime")]
        [Display(Name = "Date created")]
        public System.DateTime? DateCreated { get; set; } // DateCreated

        [Column(@"DateModified", Order = 18, TypeName = "datetime")]
        [Display(Name = "Date modified")]
        public System.DateTime? DateModified { get; set; } // DateModified

        // Reverse navigation

        /// <summary>
        /// Child StudentTherapySchedules where [StudentTherapySchedules].[StudentTherapyId] point to this entity (FK_StudentTherapySchedules_StudentTherapy)
        /// </summary>
        public System.Collections.Generic.ICollection<StudentTherapySchedule> StudentTherapySchedules { get; set; } // StudentTherapySchedules.FK_StudentTherapySchedules_StudentTherapy

        // Foreign keys

        /// <summary>
        /// Parent CaseLoad pointed by [StudentTherapies].([CaseLoadId]) (FK_StudentTherapies_CaseLoad)
        /// </summary>
        [InverseProperty("StudentTherapies")]
        [ForeignKey("CaseLoadId")] public CaseLoad CaseLoad { get; set; } // FK_StudentTherapies_CaseLoad

        /// <summary>
        /// Parent User pointed by [StudentTherapies].([CreatedById]) (FK_StudentTherapies_CreatedBy)
        /// </summary>
        [InverseProperty("StudentTherapies_CreatedById")]
        [ForeignKey("CreatedById")] public User CreatedBy { get; set; } // FK_StudentTherapies_CreatedBy

        /// <summary>
        /// Parent EncounterLocation pointed by [StudentTherapies].([EncounterLocationId]) (FK_StudentTherapies_EncounterLocation)
        /// </summary>
        [InverseProperty("StudentTherapies")]
        [ForeignKey("EncounterLocationId")] public EncounterLocation EncounterLocation { get; set; } // FK_StudentTherapies_EncounterLocation

        /// <summary>
        /// Parent User pointed by [StudentTherapies].([ModifiedById]) (FK_StudentTherapies_ModifiedBy)
        /// </summary>
        [InverseProperty("StudentTherapies_ModifiedById")]
        [ForeignKey("ModifiedById")] public User ModifiedBy { get; set; } // FK_StudentTherapies_ModifiedBy

        /// <summary>
        /// Parent Provider pointed by [StudentTherapies].([ProviderId]) (FK_StudentTherapies_Provider)
        /// </summary>
        [InverseProperty("StudentTherapies")]
        [ForeignKey("ProviderId")] public Provider Provider { get; set; } // FK_StudentTherapies_Provider

        /// <summary>
        /// Parent TherapyGroup pointed by [StudentTherapies].([TherapyGroupId]) (FK_StudentTherapies_TherapyGroup)
        /// </summary>
        [InverseProperty("StudentTherapies")]
        [ForeignKey("TherapyGroupId")] public TherapyGroup TherapyGroup { get; set; } // FK_StudentTherapies_TherapyGroup

        public StudentTherapy()
        {
            Monday = false;
            Tuesday = false;
            Wednesday = false;
            Thursday = false;
            Friday = false;
            Archived = false;
            CreatedById = 1;
            DateCreated = System.DateTime.UtcNow;
            StudentTherapySchedules = new System.Collections.Generic.List<StudentTherapySchedule>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>
