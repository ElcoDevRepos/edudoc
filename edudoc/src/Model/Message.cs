// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Model
{
    using Newtonsoft.Json;
    using System;
    using System.ComponentModel.DataAnnotations;
    using System.Data.SqlClient;
    using TrackerEnabledDbContext;

    // Messages
    [Table("Messages", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.0.0")]
    public partial class Message: IEntity
    {
        // Message
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"Id", Order = 1, TypeName = "int")]
        [Index(@"PK_Messages", 1, IsUnique = true, IsClustered = true)]
        [Key]
        [Display(Name = "Id")]
        public int Id { get; set; } // Id (Primary key)

        [Column(@"Description", Order = 2, TypeName = "varchar")]
        [MaxLength(500)]
        [StringLength(500)]
        [Display(Name = "Description")]
        public string Description { get; set; } // Description (length: 500)

        [Column(@"Body", Order = 3, TypeName = "text")]
        [MaxLength(2147483647)]
        [StringLength(2147483647)]
        [Display(Name = "Body")]
        public string Body { get; set; } // Body (length: 2147483647)

        [Column(@"ValidTill", Order = 4, TypeName = "datetime")]
        [Display(Name = "Valid till")]
        public System.DateTime? ValidTill { get; set; } // ValidTill

        [Column(@"CreatedById", Order = 5, TypeName = "int")]
        [Display(Name = "Created by ID")]
        public int CreatedById { get; set; } // CreatedById

        [Column(@"ModifiedById", Order = 6, TypeName = "int")]
        [Display(Name = "Modified by ID")]
        public int? ModifiedById { get; set; } // ModifiedById

        [Column(@"DateCreated", Order = 7, TypeName = "datetime")]
        [Display(Name = "Date created")]
        public System.DateTime DateCreated { get; set; } // DateCreated

        [Column(@"DateModified", Order = 8, TypeName = "datetime")]
        [Display(Name = "Date modified")]
        public System.DateTime? DateModified { get; set; } // DateModified

        [Column(@"Archived", Order = 9, TypeName = "bit")]
        [Display(Name = "Archived")]
        public bool Archived { get; set; } // Archived

        [Column(@"MessageFilterTypeId", Order = 10, TypeName = "int")]
        [Display(Name = "Message filter type ID")]
        public int MessageFilterTypeId { get; set; } // MessageFilterTypeId

        [Column(@"ServiceCodeId", Order = 11, TypeName = "int")]
        [Display(Name = "Service code ID")]
        public int? ServiceCodeId { get; set; } // ServiceCodeId

        [Column(@"SchoolDistrictId", Order = 12, TypeName = "int")]
        [Display(Name = "School district ID")]
        public int? SchoolDistrictId { get; set; } // SchoolDistrictId

        [Column(@"ForDistrictAdmins", Order = 13, TypeName = "bit")]
        [Display(Name = "For district admins")]
        public bool ForDistrictAdmins { get; set; } // ForDistrictAdmins

        [Column(@"ProviderTitleId", Order = 14, TypeName = "int")]
        [Display(Name = "Provider title ID")]
        public int? ProviderTitleId { get; set; } // ProviderTitleId

        [Column(@"ProviderId", Order = 15, TypeName = "int")]
        [Display(Name = "Provider ID")]
        public int? ProviderId { get; set; } // ProviderId

        [Column(@"EscId", Order = 16, TypeName = "int")]
        [Display(Name = "Esc ID")]
        public int? EscId { get; set; } // EscId

        [Column(@"SortOrder", Order = 17, TypeName = "int")]
        [Display(Name = "Sort order")]
        public int? SortOrder { get; set; } // SortOrder

        // Reverse navigation

        /// <summary>
        /// Child ReadMessages where [ReadMessages].[MessageId] point to this entity (FK_ReadMessages_Message)
        /// </summary>
        public System.Collections.Generic.ICollection<ReadMessage> ReadMessages { get; set; } // ReadMessages.FK_ReadMessages_Message

        // Foreign keys

        /// <summary>
        /// Parent User pointed by [Messages].([CreatedById]) (FK_Messages_CreatedBy)
        /// </summary>
        [InverseProperty("Messages_CreatedById")]
        [ForeignKey("CreatedById")] public User CreatedBy { get; set; } // FK_Messages_CreatedBy

        /// <summary>
        /// Parent Esc pointed by [Messages].([EscId]) (FK_Message_Escs)
        /// </summary>
        [InverseProperty("Messages")]
        [ForeignKey("EscId")] public Esc Esc { get; set; } // FK_Message_Escs

        /// <summary>
        /// Parent MessageFilterType pointed by [Messages].([MessageFilterTypeId]) (FK_Messages_MessageFilterTypes)
        /// </summary>
        [InverseProperty("Messages")]
        [ForeignKey("MessageFilterTypeId")] public MessageFilterType MessageFilterType { get; set; } // FK_Messages_MessageFilterTypes

        /// <summary>
        /// Parent User pointed by [Messages].([ModifiedById]) (FK_Messages_ModifiedBy)
        /// </summary>
        [InverseProperty("Messages_ModifiedById")]
        [ForeignKey("ModifiedById")] public User ModifiedBy { get; set; } // FK_Messages_ModifiedBy

        /// <summary>
        /// Parent Provider pointed by [Messages].([ProviderId]) (FK_Message_Providers)
        /// </summary>
        [InverseProperty("Messages")]
        [ForeignKey("ProviderId")] public Provider Provider { get; set; } // FK_Message_Providers

        /// <summary>
        /// Parent ProviderTitle pointed by [Messages].([ProviderTitleId]) (FK_Message_ProviderTitles)
        /// </summary>
        [InverseProperty("Messages")]
        [ForeignKey("ProviderTitleId")] public ProviderTitle ProviderTitle { get; set; } // FK_Message_ProviderTitles

        /// <summary>
        /// Parent SchoolDistrict pointed by [Messages].([SchoolDistrictId]) (FK_Message_SchoolDistricts)
        /// </summary>
        [InverseProperty("Messages")]
        [ForeignKey("SchoolDistrictId")] public SchoolDistrict SchoolDistrict { get; set; } // FK_Message_SchoolDistricts

        /// <summary>
        /// Parent ServiceCode pointed by [Messages].([ServiceCodeId]) (FK_Message_ServiceCodes)
        /// </summary>
        [InverseProperty("Messages")]
        [ForeignKey("ServiceCodeId")] public ServiceCode ServiceCode { get; set; } // FK_Message_ServiceCodes

        public Message()
        {
            CreatedById = 1;
            DateCreated = System.DateTime.UtcNow;
            Archived = false;
            ForDistrictAdmins = false;
            ReadMessages = new System.Collections.Generic.List<ReadMessage>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>
