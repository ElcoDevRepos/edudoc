// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Model
{
    using Newtonsoft.Json;
    using System;
    using System.ComponentModel.DataAnnotations;
    using System.Data.SqlClient;
    using TrackerEnabledDbContext;

    // IEPServices
    [Table("IEPServices", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.0.0")]
    public partial class IepService: IEntity
    {
        // IEPService

        ///<summary>
        /// Module
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"Id", Order = 1, TypeName = "int")]
        [Index(@"PK_IEPServices", 1, IsUnique = true, IsClustered = true)]
        [Key]
        [Display(Name = "Id")]
        public int Id { get; set; } // Id (Primary key)

        [Column(@"StartDate", Order = 2, TypeName = "datetime")]
        [Display(Name = "Start date")]
        public System.DateTime StartDate { get; set; } // StartDate

        [Column(@"EndDate", Order = 3, TypeName = "datetime")]
        [Display(Name = "End date")]
        public System.DateTime EndDate { get; set; } // EndDate

        [Column(@"ETRExpirationDate", Order = 4, TypeName = "datetime")]
        [Display(Name = "Etre xpiration date")]
        public System.DateTime EtrExpirationDate { get; set; } // ETRExpirationDate

        [Column(@"OTPTotalMinutes", Order = 5, TypeName = "int")]
        [Display(Name = "Otpt otal minutes")]
        public int? OtpTotalMinutes { get; set; } // OTPTotalMinutes

        [Column(@"PTTotalMinutes", Order = 6, TypeName = "int")]
        [Display(Name = "Ptt otal minutes")]
        public int? PtTotalMinutes { get; set; } // PTTotalMinutes

        [Column(@"STPTotalMinutes", Order = 7, TypeName = "int")]
        [Display(Name = "Stpt otal minutes")]
        public int? StpTotalMinutes { get; set; } // STPTotalMinutes

        [Column(@"AUDTotalMinutes", Order = 8, TypeName = "int")]
        [Display(Name = "Audt otal minutes")]
        public int? AudTotalMinutes { get; set; } // AUDTotalMinutes

        [Column(@"NursingTotalMinutes", Order = 9, TypeName = "int")]
        [Display(Name = "Nursing total minutes")]
        public int? NursingTotalMinutes { get; set; } // NursingTotalMinutes

        [Column(@"CCTotalMinutes", Order = 10, TypeName = "int")]
        [Display(Name = "Cct otal minutes")]
        public int? CcTotalMinutes { get; set; } // CCTotalMinutes

        [Column(@"SOCTotalMinutes", Order = 11, TypeName = "int")]
        [Display(Name = "Soct otal minutes")]
        public int? SocTotalMinutes { get; set; } // SOCTotalMinutes

        [Column(@"PSYTotalMinutes", Order = 12, TypeName = "int")]
        [Display(Name = "Psyt otal minutes")]
        public int? PsyTotalMinutes { get; set; } // PSYTotalMinutes

        [Column(@"OTPDate", Order = 13, TypeName = "datetime")]
        [Display(Name = "Otpd ate")]
        public System.DateTime? OtpDate { get; set; } // OTPDate

        [Column(@"PTDate", Order = 14, TypeName = "datetime")]
        [Display(Name = "Ptd ate")]
        public System.DateTime? PtDate { get; set; } // PTDate

        [Column(@"STPDate", Order = 15, TypeName = "datetime")]
        [Display(Name = "Stpd ate")]
        public System.DateTime? StpDate { get; set; } // STPDate

        [Column(@"AUDDate", Order = 16, TypeName = "datetime")]
        [Display(Name = "Audd ate")]
        public System.DateTime? AudDate { get; set; } // AUDDate

        [Column(@"NursingDate", Order = 17, TypeName = "datetime")]
        [Display(Name = "Nursing date")]
        public System.DateTime? NursingDate { get; set; } // NursingDate

        [Column(@"CCDate", Order = 18, TypeName = "datetime")]
        [Display(Name = "Ccd ate")]
        public System.DateTime? CcDate { get; set; } // CCDate

        [Column(@"SOCDate", Order = 19, TypeName = "datetime")]
        [Display(Name = "Socd ate")]
        public System.DateTime? SocDate { get; set; } // SOCDate

        [Column(@"PSYDate", Order = 20, TypeName = "datetime")]
        [Display(Name = "Psyd ate")]
        public System.DateTime? PsyDate { get; set; } // PSYDate

        [Column(@"StudentId", Order = 21, TypeName = "int")]
        [Display(Name = "Student ID")]
        public int StudentId { get; set; } // StudentId

        [Column(@"CreatedById", Order = 22, TypeName = "int")]
        [Display(Name = "Created by ID")]
        public int CreatedById { get; set; } // CreatedById

        [Column(@"ModifiedById", Order = 23, TypeName = "int")]
        [Display(Name = "Modified by ID")]
        public int? ModifiedById { get; set; } // ModifiedById

        [Column(@"DateCreated", Order = 24, TypeName = "datetime")]
        [Display(Name = "Date created")]
        public System.DateTime? DateCreated { get; set; } // DateCreated

        [Column(@"DateModified", Order = 25, TypeName = "datetime")]
        [Display(Name = "Date modified")]
        public System.DateTime? DateModified { get; set; } // DateModified

        // Foreign keys

        /// <summary>
        /// Parent User pointed by [IEPServices].([CreatedById]) (FK_IEPServices_CreatedBy)
        /// </summary>
        [InverseProperty("IepServices_CreatedById")]
        [ForeignKey("CreatedById")] public User CreatedBy { get; set; } // FK_IEPServices_CreatedBy

        /// <summary>
        /// Parent User pointed by [IEPServices].([ModifiedById]) (FK_IEPServices_ModifiedBy)
        /// </summary>
        [InverseProperty("IepServices_ModifiedById")]
        [ForeignKey("ModifiedById")] public User ModifiedBy { get; set; } // FK_IEPServices_ModifiedBy

        /// <summary>
        /// Parent Student pointed by [IEPServices].([StudentId]) (FK_IEPServices_Student)
        /// </summary>
        [InverseProperty("IepServices")]
        [ForeignKey("StudentId")] public Student Student { get; set; } // FK_IEPServices_Student

        public IepService()
        {
            OtpTotalMinutes = 0;
            PtTotalMinutes = 0;
            StpTotalMinutes = 0;
            AudTotalMinutes = 0;
            NursingTotalMinutes = 0;
            CcTotalMinutes = 0;
            SocTotalMinutes = 0;
            PsyTotalMinutes = 0;
            CreatedById = 1;
            DateCreated = System.DateTime.UtcNow;
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>
