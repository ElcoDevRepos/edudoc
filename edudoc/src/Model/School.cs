// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Model
{
    using Newtonsoft.Json;
    using System;
    using System.ComponentModel.DataAnnotations;
    using System.Data.SqlClient;
    using TrackerEnabledDbContext;

    // Schools
    [Table("Schools", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.0.0")]
    public partial class School: IEntity, IBasicNameEntity
    {
        // School

        ///<summary>
        /// Module
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"Id", Order = 1, TypeName = "int")]
        [Index(@"PK_Schools", 1, IsUnique = true, IsClustered = true)]
        [Key]
        [Display(Name = "Id")]
        public int Id { get; set; } // Id (Primary key)

        [Column(@"Name", Order = 2, TypeName = "varchar")]
        [MaxLength(250)]
        [StringLength(250)]
        [Display(Name = "Name")]
        public string Name { get; set; } // Name (length: 250)

        [Column(@"CreatedById", Order = 3, TypeName = "int")]
        [Display(Name = "Created by ID")]
        public int CreatedById { get; set; } // CreatedById

        [Column(@"ModifiedById", Order = 4, TypeName = "int")]
        [Display(Name = "Modified by ID")]
        public int? ModifiedById { get; set; } // ModifiedById

        [Column(@"DateCreated", Order = 5, TypeName = "datetime")]
        [Display(Name = "Date created")]
        public System.DateTime? DateCreated { get; set; } // DateCreated

        [Column(@"DateModified", Order = 6, TypeName = "datetime")]
        [Display(Name = "Date modified")]
        public System.DateTime? DateModified { get; set; } // DateModified

        [Column(@"Archived", Order = 7, TypeName = "bit")]
        [Display(Name = "Archived")]
        public bool Archived { get; set; } // Archived

        // Reverse navigation

        /// <summary>
        /// Child MergedStudents where [MergedStudents].[SchoolId] point to this entity (FK_MergedStudents_School)
        /// </summary>
        public System.Collections.Generic.ICollection<MergedStudent> MergedStudents { get; set; } // MergedStudents.FK_MergedStudents_School
        /// <summary>
        /// Child SchoolDistrictsSchools where [SchoolDistrictsSchools].[SchoolId] point to this entity (FK_SchoolDistrictsSchools_Schools)
        /// </summary>
        public System.Collections.Generic.ICollection<SchoolDistrictsSchool> SchoolDistrictsSchools { get; set; } // SchoolDistrictsSchools.FK_SchoolDistrictsSchools_Schools
        /// <summary>
        /// Child Students where [Students].[SchoolId] point to this entity (FK_Students_School)
        /// </summary>
        public System.Collections.Generic.ICollection<Student> Students { get; set; } // Students.FK_Students_School

        // Foreign keys

        /// <summary>
        /// Parent User pointed by [Schools].([CreatedById]) (FK_Schools_CreatedBy)
        /// </summary>
        [InverseProperty("Schools_CreatedById")]
        [ForeignKey("CreatedById")] public User CreatedBy { get; set; } // FK_Schools_CreatedBy

        /// <summary>
        /// Parent User pointed by [Schools].([ModifiedById]) (FK_Schools_ModifiedBy)
        /// </summary>
        [InverseProperty("Schools_ModifiedById")]
        [ForeignKey("ModifiedById")] public User ModifiedBy { get; set; } // FK_Schools_ModifiedBy

        public School()
        {
            CreatedById = 1;
            DateCreated = System.DateTime.UtcNow;
            Archived = false;
            SchoolDistrictsSchools = new System.Collections.Generic.List<SchoolDistrictsSchool>();
            MergedStudents = new System.Collections.Generic.List<MergedStudent>();
            Students = new System.Collections.Generic.List<Student>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>
