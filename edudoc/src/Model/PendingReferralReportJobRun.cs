// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Model
{
    using Newtonsoft.Json;
    using System;
    using System.ComponentModel.DataAnnotations;
    using System.Data.SqlClient;
    using TrackerEnabledDbContext;

    // PendingReferralReportJobRuns
    [Table("PendingReferralReportJobRuns", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.0.0")]
    public partial class PendingReferralReportJobRun: IEntity
    {
        // PendingReferralReportJobRun
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"Id", Order = 1, TypeName = "int")]
        [Index(@"PK_PendingReferralReportJobRuns", 1, IsUnique = true, IsClustered = true)]
        [Key]
        [Display(Name = "Id")]
        public int Id { get; set; } // Id (Primary key)

        [Column(@"JobRunDate", Order = 2, TypeName = "datetime")]
        [Display(Name = "Job run date")]
        public System.DateTime JobRunDate { get; set; } // JobRunDate

        [Column(@"JobRunById", Order = 3, TypeName = "int")]
        [Display(Name = "Job run by ID")]
        public int JobRunById { get; set; } // JobRunById

        // Reverse navigation

        /// <summary>
        /// Child PendingReferrals where [PendingReferrals].[PendingReferralJobRunId] point to this entity (FK_PendingReferrals_PendingReferralJobRuns)
        /// </summary>
        public System.Collections.Generic.ICollection<PendingReferral> PendingReferrals { get; set; } // PendingReferrals.FK_PendingReferrals_PendingReferralJobRuns

        // Foreign keys

        /// <summary>
        /// Parent User pointed by [PendingReferralReportJobRuns].([JobRunById]) (FK_PendingReferralReportJobRuns_Users)
        /// </summary>
        [InverseProperty("PendingReferralReportJobRuns")]
        [ForeignKey("JobRunById")] public User User { get; set; } // FK_PendingReferralReportJobRuns_Users

        public PendingReferralReportJobRun()
        {
            JobRunDate = System.DateTime.Now;
            JobRunById = 1;
            PendingReferrals = new System.Collections.Generic.List<PendingReferral>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>
