// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Model
{
    using Newtonsoft.Json;
    using System;
    using System.ComponentModel.DataAnnotations;
    using System.Data.SqlClient;
    using TrackerEnabledDbContext;

    // ProgressReports
    [Table("ProgressReports", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.0.0")]
    public partial class ProgressReport: IEntity
    {
        // ProgressReport
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"Id", Order = 1, TypeName = "int")]
        [Index(@"PK_ProgressReports", 1, IsUnique = true, IsClustered = true)]
        [Key]
        [Display(Name = "Id")]
        public int Id { get; set; } // Id (Primary key)

        [Column(@"StudentId", Order = 2, TypeName = "int")]
        [Display(Name = "Student ID")]
        public int StudentId { get; set; } // StudentId

        [Column(@"StartDate", Order = 3, TypeName = "datetime")]
        [Display(Name = "Start date")]
        public System.DateTime? StartDate { get; set; } // StartDate

        [Column(@"EndDate", Order = 4, TypeName = "datetime")]
        [Display(Name = "End date")]
        public System.DateTime? EndDate { get; set; } // EndDate

        [Column(@"Progress", Order = 5, TypeName = "bit")]
        [Display(Name = "Progress")]
        public bool? Progress { get; set; } // Progress

        [Column(@"ProgressNotes", Order = 6, TypeName = "varchar")]
        [MaxLength(5000)]
        [StringLength(5000)]
        [Display(Name = "Progress notes")]
        public string ProgressNotes { get; set; } // ProgressNotes (length: 5000)

        [Column(@"MedicalStatusChange", Order = 7, TypeName = "bit")]
        [Display(Name = "Medical status change")]
        public bool? MedicalStatusChange { get; set; } // MedicalStatusChange

        [Column(@"MedicalStatusChangeNotes", Order = 8, TypeName = "varchar")]
        [MaxLength(5000)]
        [StringLength(5000)]
        [Display(Name = "Medical status change notes")]
        public string MedicalStatusChangeNotes { get; set; } // MedicalStatusChangeNotes (length: 5000)

        [Column(@"TreatmentChange", Order = 9, TypeName = "bit")]
        [Display(Name = "Treatment change")]
        public bool? TreatmentChange { get; set; } // TreatmentChange

        [Column(@"TreatmentChangeNotes", Order = 10, TypeName = "varchar")]
        [MaxLength(5000)]
        [StringLength(5000)]
        [Display(Name = "Treatment change notes")]
        public string TreatmentChangeNotes { get; set; } // TreatmentChangeNotes (length: 5000)

        [Column(@"ESignedById", Order = 11, TypeName = "int")]
        [Display(Name = "Es igned by ID")]
        public int? ESignedById { get; set; } // ESignedById

        [Column(@"SupervisorESignedById", Order = 12, TypeName = "int")]
        [Display(Name = "Supervisor es igned by ID")]
        public int? SupervisorESignedById { get; set; } // SupervisorESignedById

        [Column(@"DateESigned", Order = 13, TypeName = "datetime")]
        [Display(Name = "Date es igned")]
        public System.DateTime? DateESigned { get; set; } // DateESigned

        [Column(@"SupervisorDateESigned", Order = 14, TypeName = "datetime")]
        [Display(Name = "Supervisor date es igned")]
        public System.DateTime? SupervisorDateESigned { get; set; } // SupervisorDateESigned

        [Column(@"Quarter", Order = 15, TypeName = "int")]
        [Display(Name = "Quarter")]
        public int? Quarter { get; set; } // Quarter

        [Column(@"CreatedById", Order = 16, TypeName = "int")]
        [Display(Name = "Created by ID")]
        public int CreatedById { get; set; } // CreatedById

        [Column(@"ModifiedById", Order = 17, TypeName = "int")]
        [Display(Name = "Modified by ID")]
        public int? ModifiedById { get; set; } // ModifiedById

        [Column(@"DateCreated", Order = 18, TypeName = "datetime")]
        [Display(Name = "Date created")]
        public System.DateTime? DateCreated { get; set; } // DateCreated

        [Column(@"DateModified", Order = 19, TypeName = "datetime")]
        [Display(Name = "Date modified")]
        public System.DateTime? DateModified { get; set; } // DateModified

        // Foreign keys

        /// <summary>
        /// Parent User pointed by [ProgressReports].([CreatedById]) (FK_ProgressReports_CreatedBy)
        /// </summary>
        [InverseProperty("ProgressReports_CreatedById")]
        [ForeignKey("CreatedById")] public User CreatedBy { get; set; } // FK_ProgressReports_CreatedBy

        /// <summary>
        /// Parent User pointed by [ProgressReports].([ESignedById]) (FK_ProgressReports_ESignedBy)
        /// </summary>
        [InverseProperty("ProgressReports_ESignedById")]
        [ForeignKey("ESignedById")] public User ESignedBy { get; set; } // FK_ProgressReports_ESignedBy

        /// <summary>
        /// Parent User pointed by [ProgressReports].([ModifiedById]) (FK_ProgressReports_ModifiedBy)
        /// </summary>
        [InverseProperty("ProgressReports_ModifiedById")]
        [ForeignKey("ModifiedById")] public User ModifiedBy { get; set; } // FK_ProgressReports_ModifiedBy

        /// <summary>
        /// Parent Student pointed by [ProgressReports].([StudentId]) (FK_ProgressReports_Student)
        /// </summary>
        [InverseProperty("ProgressReports")]
        [ForeignKey("StudentId")] public Student Student { get; set; } // FK_ProgressReports_Student

        /// <summary>
        /// Parent User pointed by [ProgressReports].([SupervisorESignedById]) (FK_ProgressReports_SupervisorESignedBy)
        /// </summary>
        [InverseProperty("ProgressReports_SupervisorESignedById")]
        [ForeignKey("SupervisorESignedById")] public User SupervisorESignedBy { get; set; } // FK_ProgressReports_SupervisorESignedBy

        public ProgressReport()
        {
            CreatedById = 1;
            DateCreated = System.DateTime.UtcNow;
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>
