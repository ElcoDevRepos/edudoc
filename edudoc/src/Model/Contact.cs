// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Model
{
    using Newtonsoft.Json;
    using System;
    using System.ComponentModel.DataAnnotations;
    using System.Data.SqlClient;
    using TrackerEnabledDbContext;

    // Contacts
    [Table("Contacts", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.0.0")]
    public partial class Contact: IEntity
    {
        // Contact
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"Id", Order = 1, TypeName = "int")]
        [Index(@"PK_Contacts", 1, IsUnique = true, IsClustered = true)]
        [Key]
        [Display(Name = "Id")]
        public int Id { get; set; } // Id (Primary key)

        [Column(@"FirstName", Order = 2, TypeName = "varchar")]
        [MaxLength(100)]
        [StringLength(100)]
        [Display(Name = "First name")]
        public string FirstName { get; set; } // FirstName (length: 100)

        [Column(@"LastName", Order = 3, TypeName = "varchar")]
        [MaxLength(100)]
        [StringLength(100)]
        [Display(Name = "Last name")]
        public string LastName { get; set; } // LastName (length: 100)

        [Column(@"Title", Order = 4, TypeName = "varchar")]
        [MaxLength(100)]
        [StringLength(100)]
        [Display(Name = "Title")]
        public string Title { get; set; } // Title (length: 100)

        [Column(@"Email", Order = 5, TypeName = "varchar")]
        [MaxLength(100)]
        [StringLength(100)]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } // Email (length: 100)

        [Column(@"AddressId", Order = 6, TypeName = "int")]
        [Display(Name = "Address ID")]
        public int? AddressId { get; set; } // AddressId

        [Column(@"RoleId", Order = 7, TypeName = "int")]
        [Display(Name = "Role ID")]
        public int RoleId { get; set; } // RoleId

        [Column(@"StatusId", Order = 8, TypeName = "int")]
        [Display(Name = "Status ID")]
        public int StatusId { get; set; } // StatusId

        [Column(@"CreatedById", Order = 9, TypeName = "int")]
        [Display(Name = "Created by ID")]
        public int? CreatedById { get; set; } // CreatedById

        [Column(@"ModifiedById", Order = 10, TypeName = "int")]
        [Display(Name = "Modified by ID")]
        public int? ModifiedById { get; set; } // ModifiedById

        [Column(@"DateCreated", Order = 11, TypeName = "datetime")]
        [Display(Name = "Date created")]
        public System.DateTime? DateCreated { get; set; } // DateCreated

        [Column(@"DateModified", Order = 12, TypeName = "datetime")]
        [Display(Name = "Date modified")]
        public System.DateTime? DateModified { get; set; } // DateModified

        [Column(@"Archived", Order = 13, TypeName = "bit")]
        [Display(Name = "Archived")]
        public bool Archived { get; set; } // Archived

        // Reverse navigation

        /// <summary>
        /// Child ContactPhones where [ContactPhones].[ContactId] point to this entity (FK_ContactPhones_Contacts)
        /// </summary>
        public System.Collections.Generic.ICollection<ContactPhone> ContactPhones { get; set; } // ContactPhones.FK_ContactPhones_Contacts
        /// <summary>
        /// Child SchoolDistricts (Many-to-Many) mapped by table [SchoolDistrictContacts]
        /// </summary>
        public System.Collections.Generic.ICollection<SchoolDistrict> SchoolDistricts_SchoolDistrictId { get; set; } // Many to many mapping
        /// <summary>
        /// Child SchoolDistricts where [SchoolDistricts].[SpecialEducationDirectorId] point to this entity (FK_SchoolDistricts_SpecialEducationDirector)
        /// </summary>
        public System.Collections.Generic.ICollection<SchoolDistrict> SchoolDistricts_SpecialEducationDirectorId { get; set; } // SchoolDistricts.FK_SchoolDistricts_SpecialEducationDirector
        /// <summary>
        /// Child SchoolDistricts where [SchoolDistricts].[TreasurerId] point to this entity (FK_SchoolDistricts_Treasurer)
        /// </summary>
        public System.Collections.Generic.ICollection<SchoolDistrict> SchoolDistricts_TreasurerId { get; set; } // SchoolDistricts.FK_SchoolDistricts_Treasurer

        // Foreign keys

        /// <summary>
        /// Parent Address pointed by [Contacts].([AddressId]) (FK_Contacts_Addresses)
        /// </summary>
        [InverseProperty("Contacts")]
        [ForeignKey("AddressId")] public Address Address { get; set; } // FK_Contacts_Addresses

        /// <summary>
        /// Parent User pointed by [Contacts].([CreatedById]) (FK_Contacts_CreatedBy)
        /// </summary>
        [InverseProperty("Contacts_CreatedById")]
        [ForeignKey("CreatedById")] public User CreatedBy { get; set; } // FK_Contacts_CreatedBy

        /// <summary>
        /// Parent User pointed by [Contacts].([ModifiedById]) (FK_Contacts_ModifiedBy)
        /// </summary>
        [InverseProperty("Contacts_ModifiedById")]
        [ForeignKey("ModifiedById")] public User ModifiedBy { get; set; } // FK_Contacts_ModifiedBy

        /// <summary>
        /// Parent ContactRole pointed by [Contacts].([RoleId]) (FK_Contacts_ContactRoles)
        /// </summary>
        [InverseProperty("Contacts")]
        [ForeignKey("RoleId")] public ContactRole ContactRole { get; set; } // FK_Contacts_ContactRoles

        /// <summary>
        /// Parent ContactStatus pointed by [Contacts].([StatusId]) (FK_Contacts_ContactStatuses)
        /// </summary>
        [InverseProperty("Contacts")]
        [ForeignKey("StatusId")] public ContactStatus ContactStatus { get; set; } // FK_Contacts_ContactStatuses

        public Contact()
        {
            Title = "";
            StatusId = 0;
            DateCreated = System.DateTime.UtcNow;
            Archived = false;
            SchoolDistricts_TreasurerId = new System.Collections.Generic.List<SchoolDistrict>();
            SchoolDistricts_SpecialEducationDirectorId = new System.Collections.Generic.List<SchoolDistrict>();
            ContactPhones = new System.Collections.Generic.List<ContactPhone>();
            SchoolDistricts_SchoolDistrictId = new System.Collections.Generic.List<SchoolDistrict>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>
