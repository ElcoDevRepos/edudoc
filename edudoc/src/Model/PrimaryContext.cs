// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Model
{
    using Newtonsoft.Json;
    using System;
    using System.ComponentModel.DataAnnotations;
    using System.Data.SqlClient;
    using TrackerEnabledDbContext;

    using Microsoft.Extensions.Configuration;
    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.0.0")]
    public partial class PrimaryContext : BreckContext, IBreckBaseContext, IPrimaryContext
    {
        public System.Data.Entity.DbSet<Acknowledgement> Acknowledgements { get; set; } // Acknowledgements
        public System.Data.Entity.DbSet<ActivitySummary> ActivitySummaries { get; set; } // ActivitySummaries
        public System.Data.Entity.DbSet<ActivitySummaryDistrict> ActivitySummaryDistricts { get; set; } // ActivitySummaryDistricts
        public System.Data.Entity.DbSet<ActivitySummaryProvider> ActivitySummaryProviders { get; set; } // ActivitySummaryProviders
        public System.Data.Entity.DbSet<ActivitySummaryServiceArea> ActivitySummaryServiceAreas { get; set; } // ActivitySummaryServiceAreas
        public System.Data.Entity.DbSet<Address> Addresses { get; set; } // Addresses
        public System.Data.Entity.DbSet<AdminSchoolDistrict> AdminSchoolDistricts { get; set; } // AdminSchoolDistricts
        public System.Data.Entity.DbSet<Agency> Agencies { get; set; } // Agencies
        public System.Data.Entity.DbSet<AgencyType> AgencyTypes { get; set; } // AgencyTypes
        public System.Data.Entity.DbSet<AnnualEntry> AnnualEntries { get; set; } // AnnualEntries
        public System.Data.Entity.DbSet<AnnualEntryStatus> AnnualEntryStatus { get; set; } // AnnualEntryStatuses
        public System.Data.Entity.DbSet<AuthApplicationType> AuthApplicationTypes { get; set; } // AuthApplicationTypes
        public System.Data.Entity.DbSet<AuthClient> AuthClients { get; set; } // AuthClients
        public System.Data.Entity.DbSet<AuthToken> AuthTokens { get; set; } // AuthTokens
        public System.Data.Entity.DbSet<AuthUser> AuthUsers { get; set; } // AuthUsers
        public System.Data.Entity.DbSet<BillingFailure> BillingFailures { get; set; } // BillingFailures
        public System.Data.Entity.DbSet<BillingFailureReason> BillingFailureReasons { get; set; } // BillingFailureReasons
        public System.Data.Entity.DbSet<BillingFile> BillingFiles { get; set; } // BillingFiles
        public System.Data.Entity.DbSet<BillingResponseFile> BillingResponseFiles { get; set; } // BillingResponseFiles
        public System.Data.Entity.DbSet<BillingSchedule> BillingSchedules { get; set; } // BillingSchedules
        public System.Data.Entity.DbSet<BillingScheduleAdminNotification> BillingScheduleAdminNotifications { get; set; } // BillingScheduleAdminNotifications
        public System.Data.Entity.DbSet<BillingScheduleDistrict> BillingScheduleDistricts { get; set; } // BillingScheduleDistricts
        public System.Data.Entity.DbSet<BillingScheduleExcludedCptCode> BillingScheduleExcludedCptCodes { get; set; } // BillingScheduleExcludedCptCodes
        public System.Data.Entity.DbSet<BillingScheduleExcludedProvider> BillingScheduleExcludedProviders { get; set; } // BillingScheduleExcludedProviders
        public System.Data.Entity.DbSet<BillingScheduleExcludedServiceCode> BillingScheduleExcludedServiceCodes { get; set; } // BillingScheduleExcludedServiceCodes
        public System.Data.Entity.DbSet<CaseLoad> CaseLoads { get; set; } // CaseLoads
        public System.Data.Entity.DbSet<CaseLoadCptCode> CaseLoadCptCodes { get; set; } // CaseLoadCptCodes
        public System.Data.Entity.DbSet<CaseLoadGoal> CaseLoadGoals { get; set; } // CaseLoadGoals
        public System.Data.Entity.DbSet<CaseLoadMethod> CaseLoadMethods { get; set; } // CaseLoadMethods
        public System.Data.Entity.DbSet<CaseLoadScript> CaseLoadScripts { get; set; } // CaseLoadScripts
        public System.Data.Entity.DbSet<CaseLoadScriptGoal> CaseLoadScriptGoals { get; set; } // CaseLoadScriptGoals
        public System.Data.Entity.DbSet<ClaimsDistrict> ClaimsDistricts { get; set; } // ClaimsDistricts
        public System.Data.Entity.DbSet<ClaimsEncounter> ClaimsEncounters { get; set; } // ClaimsEncounters
        public System.Data.Entity.DbSet<ClaimsStudent> ClaimsStudents { get; set; } // ClaimsStudents
        public System.Data.Entity.DbSet<ClaimType> ClaimTypes { get; set; } // ClaimTypes
        public System.Data.Entity.DbSet<ClaimValue> ClaimValues { get; set; } // ClaimValues
        public System.Data.Entity.DbSet<ClearedAuthToken> ClearedAuthTokens { get; set; } // ClearedAuthTokens
        public System.Data.Entity.DbSet<ConsoleJobLog> ConsoleJobLogs { get; set; } // ConsoleJobLogs
        public System.Data.Entity.DbSet<ConsoleJobType> ConsoleJobTypes { get; set; } // ConsoleJobTypes
        public System.Data.Entity.DbSet<Contact> Contacts { get; set; } // Contacts
        public System.Data.Entity.DbSet<ContactPhone> ContactPhones { get; set; } // ContactPhones
        public System.Data.Entity.DbSet<ContactRole> ContactRoles { get; set; } // ContactRoles
        public System.Data.Entity.DbSet<ContactStatus> ContactStatus { get; set; } // ContactStatuses
        public System.Data.Entity.DbSet<Country> Countries { get; set; } // Countries
        public System.Data.Entity.DbSet<County> Counties { get; set; } // Counties
        public System.Data.Entity.DbSet<CptCode> CptCodes { get; set; } // CPTCodes
        public System.Data.Entity.DbSet<CptCodeAssocation> CptCodeAssocations { get; set; } // CPTCodeAssocations
        public System.Data.Entity.DbSet<DiagnosisCode> DiagnosisCodes { get; set; } // DiagnosisCodes
        public System.Data.Entity.DbSet<DiagnosisCodeAssociation> DiagnosisCodeAssociations { get; set; } // DiagnosisCodeAssociations
        public System.Data.Entity.DbSet<DisabilityCode> DisabilityCodes { get; set; } // DisabilityCodes
        public System.Data.Entity.DbSet<DistrictProgressReportDate> DistrictProgressReportDates { get; set; } // DistrictProgressReportDates
        public System.Data.Entity.DbSet<Document> Documents { get; set; } // Documents
        public System.Data.Entity.DbSet<DocumentType> DocumentTypes { get; set; } // DocumentTypes
        public System.Data.Entity.DbSet<EdiErrorCode> EdiErrorCodes { get; set; } // EdiErrorCodes
        public System.Data.Entity.DbSet<EdiErrorCodeAdminNotification> EdiErrorCodeAdminNotifications { get; set; } // EdiErrorCodeAdminNotifications
        public System.Data.Entity.DbSet<EdiFileType> EdiFileTypes { get; set; } // EdiFileTypes
        public System.Data.Entity.DbSet<EdiMetaData> EdiMetaDatas { get; set; } // EdiMetaDatas
        public System.Data.Entity.DbSet<Encounter> Encounters { get; set; } // Encounters
        public System.Data.Entity.DbSet<EncounterIdentifier> EncounterIdentifiers { get; set; } // EncounterIdentifiers
        public System.Data.Entity.DbSet<EncounterLocation> EncounterLocations { get; set; } // EncounterLocations
        public System.Data.Entity.DbSet<EncounterReasonForReturn> EncounterReasonForReturns { get; set; } // EncounterReasonForReturn
        public System.Data.Entity.DbSet<EncounterReturnReasonCategory> EncounterReturnReasonCategories { get; set; } // EncounterReturnReasonCategories
        public System.Data.Entity.DbSet<EncounterStatus> EncounterStatus { get; set; } // EncounterStatuses
        public System.Data.Entity.DbSet<EncounterStudent> EncounterStudents { get; set; } // EncounterStudents
        public System.Data.Entity.DbSet<EncounterStudentCptCode> EncounterStudentCptCodes { get; set; } // EncounterStudentCptCodes
        public System.Data.Entity.DbSet<EncounterStudentGoal> EncounterStudentGoals { get; set; } // EncounterStudentGoals
        public System.Data.Entity.DbSet<EncounterStudentMethod> EncounterStudentMethods { get; set; } // EncounterStudentMethods
        public System.Data.Entity.DbSet<EncounterStudentStatus> EncounterStudentStatus { get; set; } // EncounterStudentStatuses
        public System.Data.Entity.DbSet<Esc> Escs { get; set; } // Escs
        public System.Data.Entity.DbSet<EscSchoolDistrict> EscSchoolDistricts { get; set; } // EscSchoolDistricts
        public System.Data.Entity.DbSet<ESignatureContent> ESignatureContents { get; set; } // ESignatureContents
        public System.Data.Entity.DbSet<EvaluationType> EvaluationTypes { get; set; } // EvaluationTypes
        public System.Data.Entity.DbSet<EvaluationTypesDiagnosisCode> EvaluationTypesDiagnosisCodes { get; set; } // EvaluationTypesDiagnosisCodes
        public System.Data.Entity.DbSet<Goal> Goals { get; set; } // Goals
        public System.Data.Entity.DbSet<HealthCareClaim> HealthCareClaims { get; set; } // HealthCareClaims
        public System.Data.Entity.DbSet<IepService> IepServices { get; set; } // IEPServices
        public System.Data.Entity.DbSet<Image> Images { get; set; } // Images
        public System.Data.Entity.DbSet<ImpersonationLog> ImpersonationLogs { get; set; } // ImpersonationLogs
        public System.Data.Entity.DbSet<JobsAudit> JobsAudits { get; set; } // JobsAudit
        public System.Data.Entity.DbSet<MergedStudent> MergedStudents { get; set; } // MergedStudents
        public System.Data.Entity.DbSet<Message> Messages { get; set; } // Messages
        public System.Data.Entity.DbSet<MessageDocument> MessageDocuments { get; set; } // MessageDocuments
        public System.Data.Entity.DbSet<MessageFilterType> MessageFilterTypes { get; set; } // MessageFilterTypes
        public System.Data.Entity.DbSet<MessageLink> MessageLinks { get; set; } // MessageLinks
        public System.Data.Entity.DbSet<Method> Methods { get; set; } // Methods
        public System.Data.Entity.DbSet<MigrationProviderCaseNotesHistory> MigrationProviderCaseNotesHistories { get; set; } // Migration_ProviderCaseNotesHistory
        public System.Data.Entity.DbSet<NonMspService> NonMspServices { get; set; } // NonMspServices
        public System.Data.Entity.DbSet<Note> Notes { get; set; } // Notes
        public System.Data.Entity.DbSet<NursingGoalResponse> NursingGoalResponses { get; set; } // NursingGoalResponse
        public System.Data.Entity.DbSet<NursingGoalResult> NursingGoalResults { get; set; } // NursingGoalResults
        public System.Data.Entity.DbSet<PendingReferral> PendingReferrals { get; set; } // PendingReferrals
        public System.Data.Entity.DbSet<PendingReferralReportJobRun> PendingReferralReportJobRuns { get; set; } // PendingReferralReportJobRuns
        public System.Data.Entity.DbSet<PhoneType> PhoneTypes { get; set; } // PhoneTypes
        public System.Data.Entity.DbSet<ProgressReport> ProgressReports { get; set; } // ProgressReports
        public System.Data.Entity.DbSet<Provider> Providers { get; set; } // Providers
        public System.Data.Entity.DbSet<ProviderAcknowledgmentLog> ProviderAcknowledgmentLogs { get; set; } // ProviderAcknowledgmentLogs
        public System.Data.Entity.DbSet<ProviderCaseUpload> ProviderCaseUploads { get; set; } // ProviderCaseUploads
        public System.Data.Entity.DbSet<ProviderCaseUploadDocument> ProviderCaseUploadDocuments { get; set; } // ProviderCaseUploadDocuments
        public System.Data.Entity.DbSet<ProviderDoNotBillReason> ProviderDoNotBillReasons { get; set; } // ProviderDoNotBillReasons
        public System.Data.Entity.DbSet<ProviderEmploymentType> ProviderEmploymentTypes { get; set; } // ProviderEmploymentTypes
        public System.Data.Entity.DbSet<ProviderEscAssignment> ProviderEscAssignments { get; set; } // ProviderEscAssignments
        public System.Data.Entity.DbSet<ProviderEscSchoolDistrict> ProviderEscSchoolDistricts { get; set; } // ProviderEscSchoolDistricts
        public System.Data.Entity.DbSet<ProviderInactivityDate> ProviderInactivityDates { get; set; } // ProviderInactivityDates
        public System.Data.Entity.DbSet<ProviderInactivityReason> ProviderInactivityReasons { get; set; } // ProviderInactivityReasons
        public System.Data.Entity.DbSet<ProviderLicens> ProviderLicens { get; set; } // ProviderLicenses
        public System.Data.Entity.DbSet<ProviderOdeCertification> ProviderOdeCertifications { get; set; } // ProviderODECertifications
        public System.Data.Entity.DbSet<ProviderStudent> ProviderStudents { get; set; } // ProviderStudents
        public System.Data.Entity.DbSet<ProviderStudentHistory> ProviderStudentHistories { get; set; } // ProviderStudentHistories
        public System.Data.Entity.DbSet<ProviderStudentSupervisor> ProviderStudentSupervisors { get; set; } // ProviderStudentSupervisors
        public System.Data.Entity.DbSet<ProviderTitle> ProviderTitles { get; set; } // ProviderTitles
        public System.Data.Entity.DbSet<ProviderTraining> ProviderTrainings { get; set; } // ProviderTrainings
        public System.Data.Entity.DbSet<ReadMessage> ReadMessages { get; set; } // ReadMessages
        public System.Data.Entity.DbSet<RefactorLog> RefactorLogs { get; set; } // __RefactorLog
        public System.Data.Entity.DbSet<RevokeAccess> RevokeAccesses { get; set; } // RevokeAccess
        public System.Data.Entity.DbSet<RosterValidation> RosterValidations { get; set; } // RosterValidations
        public System.Data.Entity.DbSet<RosterValidationDistrict> RosterValidationDistricts { get; set; } // RosterValidationDistricts
        public System.Data.Entity.DbSet<RosterValidationFile> RosterValidationFiles { get; set; } // RosterValidationFiles
        public System.Data.Entity.DbSet<RosterValidationResponseFile> RosterValidationResponseFiles { get; set; } // RosterValidationResponseFiles
        public System.Data.Entity.DbSet<RosterValidationStudent> RosterValidationStudents { get; set; } // RosterValidationStudents
        public System.Data.Entity.DbSet<School> Schools { get; set; } // Schools
        public System.Data.Entity.DbSet<SchoolDistrict> SchoolDistricts { get; set; } // SchoolDistricts
        public System.Data.Entity.DbSet<SchoolDistrictProviderCaseNote> SchoolDistrictProviderCaseNotes { get; set; } // SchoolDistrictProviderCaseNotes
        public System.Data.Entity.DbSet<SchoolDistrictRoster> SchoolDistrictRosters { get; set; } // SchoolDistrictRosters
        public System.Data.Entity.DbSet<SchoolDistrictRosterDocument> SchoolDistrictRosterDocuments { get; set; } // SchoolDistrictRosterDocuments
        public System.Data.Entity.DbSet<SchoolDistrictsAccountAssistant> SchoolDistrictsAccountAssistants { get; set; } // SchoolDistrictsAccountAssistants
        public System.Data.Entity.DbSet<SchoolDistrictsFinancialRep> SchoolDistrictsFinancialReps { get; set; } // SchoolDistrictsFinancialReps
        public System.Data.Entity.DbSet<SchoolDistrictsSchool> SchoolDistrictsSchools { get; set; } // SchoolDistrictsSchools
        public System.Data.Entity.DbSet<ServiceCode> ServiceCodes { get; set; } // ServiceCodes
        public System.Data.Entity.DbSet<ServiceOutcome> ServiceOutcomes { get; set; } // ServiceOutcomes
        public System.Data.Entity.DbSet<ServiceType> ServiceTypes { get; set; } // ServiceTypes
        public System.Data.Entity.DbSet<ServiceUnitRule> ServiceUnitRules { get; set; } // ServiceUnitRules
        public System.Data.Entity.DbSet<ServiceUnitTimeSegment> ServiceUnitTimeSegments { get; set; } // ServiceUnitTimeSegments
        public System.Data.Entity.DbSet<Setting> Settings { get; set; } // Settings
        public System.Data.Entity.DbSet<State> States { get; set; } // States
        public System.Data.Entity.DbSet<Student> Students { get; set; } // Students
        public System.Data.Entity.DbSet<StudentDeviationReason> StudentDeviationReasons { get; set; } // StudentDeviationReasons
        public System.Data.Entity.DbSet<StudentDisabilityCode> StudentDisabilityCodes { get; set; } // StudentDisabilityCodes
        public System.Data.Entity.DbSet<StudentDistrictWithdrawal> StudentDistrictWithdrawals { get; set; } // StudentDistrictWithdrawals
        public System.Data.Entity.DbSet<StudentParentalConsent> StudentParentalConsents { get; set; } // StudentParentalConsents
        public System.Data.Entity.DbSet<StudentParentalConsentType> StudentParentalConsentTypes { get; set; } // StudentParentalConsentTypes
        public System.Data.Entity.DbSet<StudentTherapy> StudentTherapies { get; set; } // StudentTherapies
        public System.Data.Entity.DbSet<StudentTherapySchedule> StudentTherapySchedules { get; set; } // StudentTherapySchedules
        public System.Data.Entity.DbSet<StudentType> StudentTypes { get; set; } // StudentTypes
        public System.Data.Entity.DbSet<SupervisorProviderStudentReferalSignOff> SupervisorProviderStudentReferalSignOffs { get; set; } // SupervisorProviderStudentReferalSignOffs
        public System.Data.Entity.DbSet<TherapyCaseNote> TherapyCaseNotes { get; set; } // TherapyCaseNotes
        public System.Data.Entity.DbSet<TherapyGroup> TherapyGroups { get; set; } // TherapyGroups
        public System.Data.Entity.DbSet<TrainingType> TrainingTypes { get; set; } // TrainingTypes
        public System.Data.Entity.DbSet<UnmatchedClaimDistrict> UnmatchedClaimDistricts { get; set; } // UnmatchedClaimDistricts
        public System.Data.Entity.DbSet<UnmatchedClaimRespons> UnmatchedClaimRespons { get; set; } // UnmatchedClaimResponses
        public System.Data.Entity.DbSet<User> Users { get; set; } // Users
        public System.Data.Entity.DbSet<UserPhone> UserPhones { get; set; } // UserPhones
        public System.Data.Entity.DbSet<UserRole> UserRoles { get; set; } // UserRoles
        public System.Data.Entity.DbSet<UserRoleClaim> UserRoleClaims { get; set; } // UserRoleClaims
        public System.Data.Entity.DbSet<UserType> UserTypes { get; set; } // UserTypes
        public System.Data.Entity.DbSet<Voucher> Vouchers { get; set; } // Vouchers
        public System.Data.Entity.DbSet<VoucherBillingResponseFile> VoucherBillingResponseFiles { get; set; } // VoucherBillingResponseFiles
        public System.Data.Entity.DbSet<VoucherType> VoucherTypes { get; set; } // VoucherTypes

        static PrimaryContext()
        {
            System.Data.Entity.Database.SetInitializer<PrimaryContext>(null);
        }

        public PrimaryContext(Microsoft.Extensions.Configuration.IConfiguration configuration)
            : base(configuration.GetConnectionString("Primary") ?? System.Configuration.ConfigurationManager.ConnectionStrings["Primary"].ConnectionString)
        {
            InitializePartial();
        }

        protected override void Dispose(bool disposing)
        {
            DisposePartial(disposing);
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new AcknowledgementConfiguration());
            modelBuilder.Configurations.Add(new ActivitySummaryConfiguration());
            modelBuilder.Configurations.Add(new ActivitySummaryDistrictConfiguration());
            modelBuilder.Configurations.Add(new ActivitySummaryProviderConfiguration());
            modelBuilder.Configurations.Add(new ActivitySummaryServiceAreaConfiguration());
            modelBuilder.Configurations.Add(new AddressConfiguration());
            modelBuilder.Configurations.Add(new AdminSchoolDistrictConfiguration());
            modelBuilder.Configurations.Add(new AgencyConfiguration());
            modelBuilder.Configurations.Add(new AgencyTypeConfiguration());
            modelBuilder.Configurations.Add(new AnnualEntryConfiguration());
            modelBuilder.Configurations.Add(new AnnualEntryStatusConfiguration());
            modelBuilder.Configurations.Add(new AuthApplicationTypeConfiguration());
            modelBuilder.Configurations.Add(new AuthClientConfiguration());
            modelBuilder.Configurations.Add(new AuthTokenConfiguration());
            modelBuilder.Configurations.Add(new AuthUserConfiguration());
            modelBuilder.Configurations.Add(new BillingFailureConfiguration());
            modelBuilder.Configurations.Add(new BillingFailureReasonConfiguration());
            modelBuilder.Configurations.Add(new BillingFileConfiguration());
            modelBuilder.Configurations.Add(new BillingResponseFileConfiguration());
            modelBuilder.Configurations.Add(new BillingScheduleConfiguration());
            modelBuilder.Configurations.Add(new BillingScheduleAdminNotificationConfiguration());
            modelBuilder.Configurations.Add(new BillingScheduleDistrictConfiguration());
            modelBuilder.Configurations.Add(new BillingScheduleExcludedCptCodeConfiguration());
            modelBuilder.Configurations.Add(new BillingScheduleExcludedProviderConfiguration());
            modelBuilder.Configurations.Add(new BillingScheduleExcludedServiceCodeConfiguration());
            modelBuilder.Configurations.Add(new CaseLoadConfiguration());
            modelBuilder.Configurations.Add(new CaseLoadCptCodeConfiguration());
            modelBuilder.Configurations.Add(new CaseLoadGoalConfiguration());
            modelBuilder.Configurations.Add(new CaseLoadMethodConfiguration());
            modelBuilder.Configurations.Add(new CaseLoadScriptConfiguration());
            modelBuilder.Configurations.Add(new CaseLoadScriptGoalConfiguration());
            modelBuilder.Configurations.Add(new ClaimsDistrictConfiguration());
            modelBuilder.Configurations.Add(new ClaimsEncounterConfiguration());
            modelBuilder.Configurations.Add(new ClaimsStudentConfiguration());
            modelBuilder.Configurations.Add(new ClaimTypeConfiguration());
            modelBuilder.Configurations.Add(new ClaimValueConfiguration());
            modelBuilder.Configurations.Add(new ClearedAuthTokenConfiguration());
            modelBuilder.Configurations.Add(new ConsoleJobLogConfiguration());
            modelBuilder.Configurations.Add(new ConsoleJobTypeConfiguration());
            modelBuilder.Configurations.Add(new ContactConfiguration());
            modelBuilder.Configurations.Add(new ContactPhoneConfiguration());
            modelBuilder.Configurations.Add(new ContactRoleConfiguration());
            modelBuilder.Configurations.Add(new ContactStatusConfiguration());
            modelBuilder.Configurations.Add(new CountryConfiguration());
            modelBuilder.Configurations.Add(new CountyConfiguration());
            modelBuilder.Configurations.Add(new CptCodeConfiguration());
            modelBuilder.Configurations.Add(new CptCodeAssocationConfiguration());
            modelBuilder.Configurations.Add(new DiagnosisCodeConfiguration());
            modelBuilder.Configurations.Add(new DiagnosisCodeAssociationConfiguration());
            modelBuilder.Configurations.Add(new DisabilityCodeConfiguration());
            modelBuilder.Configurations.Add(new DistrictProgressReportDateConfiguration());
            modelBuilder.Configurations.Add(new DocumentConfiguration());
            modelBuilder.Configurations.Add(new DocumentTypeConfiguration());
            modelBuilder.Configurations.Add(new EdiErrorCodeConfiguration());
            modelBuilder.Configurations.Add(new EdiErrorCodeAdminNotificationConfiguration());
            modelBuilder.Configurations.Add(new EdiFileTypeConfiguration());
            modelBuilder.Configurations.Add(new EdiMetaDataConfiguration());
            modelBuilder.Configurations.Add(new EncounterConfiguration());
            modelBuilder.Configurations.Add(new EncounterIdentifierConfiguration());
            modelBuilder.Configurations.Add(new EncounterLocationConfiguration());
            modelBuilder.Configurations.Add(new EncounterReasonForReturnConfiguration());
            modelBuilder.Configurations.Add(new EncounterReturnReasonCategoryConfiguration());
            modelBuilder.Configurations.Add(new EncounterStatusConfiguration());
            modelBuilder.Configurations.Add(new EncounterStudentConfiguration());
            modelBuilder.Configurations.Add(new EncounterStudentCptCodeConfiguration());
            modelBuilder.Configurations.Add(new EncounterStudentGoalConfiguration());
            modelBuilder.Configurations.Add(new EncounterStudentMethodConfiguration());
            modelBuilder.Configurations.Add(new EncounterStudentStatusConfiguration());
            modelBuilder.Configurations.Add(new EscConfiguration());
            modelBuilder.Configurations.Add(new EscSchoolDistrictConfiguration());
            modelBuilder.Configurations.Add(new ESignatureContentConfiguration());
            modelBuilder.Configurations.Add(new EvaluationTypeConfiguration());
            modelBuilder.Configurations.Add(new EvaluationTypesDiagnosisCodeConfiguration());
            modelBuilder.Configurations.Add(new GoalConfiguration());
            modelBuilder.Configurations.Add(new HealthCareClaimConfiguration());
            modelBuilder.Configurations.Add(new IepServiceConfiguration());
            modelBuilder.Configurations.Add(new ImageConfiguration());
            modelBuilder.Configurations.Add(new ImpersonationLogConfiguration());
            modelBuilder.Configurations.Add(new JobsAuditConfiguration());
            modelBuilder.Configurations.Add(new MergedStudentConfiguration());
            modelBuilder.Configurations.Add(new MessageConfiguration());
            modelBuilder.Configurations.Add(new MessageDocumentConfiguration());
            modelBuilder.Configurations.Add(new MessageFilterTypeConfiguration());
            modelBuilder.Configurations.Add(new MessageLinkConfiguration());
            modelBuilder.Configurations.Add(new MethodConfiguration());
            modelBuilder.Configurations.Add(new MigrationProviderCaseNotesHistoryConfiguration());
            modelBuilder.Configurations.Add(new NonMspServiceConfiguration());
            modelBuilder.Configurations.Add(new NoteConfiguration());
            modelBuilder.Configurations.Add(new NursingGoalResponseConfiguration());
            modelBuilder.Configurations.Add(new NursingGoalResultConfiguration());
            modelBuilder.Configurations.Add(new PendingReferralConfiguration());
            modelBuilder.Configurations.Add(new PendingReferralReportJobRunConfiguration());
            modelBuilder.Configurations.Add(new PhoneTypeConfiguration());
            modelBuilder.Configurations.Add(new ProgressReportConfiguration());
            modelBuilder.Configurations.Add(new ProviderConfiguration());
            modelBuilder.Configurations.Add(new ProviderAcknowledgmentLogConfiguration());
            modelBuilder.Configurations.Add(new ProviderCaseUploadConfiguration());
            modelBuilder.Configurations.Add(new ProviderCaseUploadDocumentConfiguration());
            modelBuilder.Configurations.Add(new ProviderDoNotBillReasonConfiguration());
            modelBuilder.Configurations.Add(new ProviderEmploymentTypeConfiguration());
            modelBuilder.Configurations.Add(new ProviderEscAssignmentConfiguration());
            modelBuilder.Configurations.Add(new ProviderEscSchoolDistrictConfiguration());
            modelBuilder.Configurations.Add(new ProviderInactivityDateConfiguration());
            modelBuilder.Configurations.Add(new ProviderInactivityReasonConfiguration());
            modelBuilder.Configurations.Add(new ProviderLicensConfiguration());
            modelBuilder.Configurations.Add(new ProviderOdeCertificationConfiguration());
            modelBuilder.Configurations.Add(new ProviderStudentConfiguration());
            modelBuilder.Configurations.Add(new ProviderStudentHistoryConfiguration());
            modelBuilder.Configurations.Add(new ProviderStudentSupervisorConfiguration());
            modelBuilder.Configurations.Add(new ProviderTitleConfiguration());
            modelBuilder.Configurations.Add(new ProviderTrainingConfiguration());
            modelBuilder.Configurations.Add(new ReadMessageConfiguration());
            modelBuilder.Configurations.Add(new RefactorLogConfiguration());
            modelBuilder.Configurations.Add(new RevokeAccessConfiguration());
            modelBuilder.Configurations.Add(new RosterValidationConfiguration());
            modelBuilder.Configurations.Add(new RosterValidationDistrictConfiguration());
            modelBuilder.Configurations.Add(new RosterValidationFileConfiguration());
            modelBuilder.Configurations.Add(new RosterValidationResponseFileConfiguration());
            modelBuilder.Configurations.Add(new RosterValidationStudentConfiguration());
            modelBuilder.Configurations.Add(new SchoolConfiguration());
            modelBuilder.Configurations.Add(new SchoolDistrictConfiguration());
            modelBuilder.Configurations.Add(new SchoolDistrictProviderCaseNoteConfiguration());
            modelBuilder.Configurations.Add(new SchoolDistrictRosterConfiguration());
            modelBuilder.Configurations.Add(new SchoolDistrictRosterDocumentConfiguration());
            modelBuilder.Configurations.Add(new SchoolDistrictsAccountAssistantConfiguration());
            modelBuilder.Configurations.Add(new SchoolDistrictsFinancialRepConfiguration());
            modelBuilder.Configurations.Add(new SchoolDistrictsSchoolConfiguration());
            modelBuilder.Configurations.Add(new ServiceCodeConfiguration());
            modelBuilder.Configurations.Add(new ServiceOutcomeConfiguration());
            modelBuilder.Configurations.Add(new ServiceTypeConfiguration());
            modelBuilder.Configurations.Add(new ServiceUnitRuleConfiguration());
            modelBuilder.Configurations.Add(new ServiceUnitTimeSegmentConfiguration());
            modelBuilder.Configurations.Add(new SettingConfiguration());
            modelBuilder.Configurations.Add(new StateConfiguration());
            modelBuilder.Configurations.Add(new StudentConfiguration());
            modelBuilder.Configurations.Add(new StudentDeviationReasonConfiguration());
            modelBuilder.Configurations.Add(new StudentDisabilityCodeConfiguration());
            modelBuilder.Configurations.Add(new StudentDistrictWithdrawalConfiguration());
            modelBuilder.Configurations.Add(new StudentParentalConsentConfiguration());
            modelBuilder.Configurations.Add(new StudentParentalConsentTypeConfiguration());
            modelBuilder.Configurations.Add(new StudentTherapyConfiguration());
            modelBuilder.Configurations.Add(new StudentTherapyScheduleConfiguration());
            modelBuilder.Configurations.Add(new StudentTypeConfiguration());
            modelBuilder.Configurations.Add(new SupervisorProviderStudentReferalSignOffConfiguration());
            modelBuilder.Configurations.Add(new TherapyCaseNoteConfiguration());
            modelBuilder.Configurations.Add(new TherapyGroupConfiguration());
            modelBuilder.Configurations.Add(new TrainingTypeConfiguration());
            modelBuilder.Configurations.Add(new UnmatchedClaimDistrictConfiguration());
            modelBuilder.Configurations.Add(new UnmatchedClaimResponsConfiguration());
            modelBuilder.Configurations.Add(new UserConfiguration());
            modelBuilder.Configurations.Add(new UserPhoneConfiguration());
            modelBuilder.Configurations.Add(new UserRoleConfiguration());
            modelBuilder.Configurations.Add(new UserRoleClaimConfiguration());
            modelBuilder.Configurations.Add(new UserTypeConfiguration());
            modelBuilder.Configurations.Add(new VoucherConfiguration());
            modelBuilder.Configurations.Add(new VoucherBillingResponseFileConfiguration());
            modelBuilder.Configurations.Add(new VoucherTypeConfiguration());

            OnModelCreatingPartial(modelBuilder);
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new AcknowledgementConfiguration(schema));
            modelBuilder.Configurations.Add(new ActivitySummaryConfiguration(schema));
            modelBuilder.Configurations.Add(new ActivitySummaryDistrictConfiguration(schema));
            modelBuilder.Configurations.Add(new ActivitySummaryProviderConfiguration(schema));
            modelBuilder.Configurations.Add(new ActivitySummaryServiceAreaConfiguration(schema));
            modelBuilder.Configurations.Add(new AddressConfiguration(schema));
            modelBuilder.Configurations.Add(new AdminSchoolDistrictConfiguration(schema));
            modelBuilder.Configurations.Add(new AgencyConfiguration(schema));
            modelBuilder.Configurations.Add(new AgencyTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new AnnualEntryConfiguration(schema));
            modelBuilder.Configurations.Add(new AnnualEntryStatusConfiguration(schema));
            modelBuilder.Configurations.Add(new AuthApplicationTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new AuthClientConfiguration(schema));
            modelBuilder.Configurations.Add(new AuthTokenConfiguration(schema));
            modelBuilder.Configurations.Add(new AuthUserConfiguration(schema));
            modelBuilder.Configurations.Add(new BillingFailureConfiguration(schema));
            modelBuilder.Configurations.Add(new BillingFailureReasonConfiguration(schema));
            modelBuilder.Configurations.Add(new BillingFileConfiguration(schema));
            modelBuilder.Configurations.Add(new BillingResponseFileConfiguration(schema));
            modelBuilder.Configurations.Add(new BillingScheduleConfiguration(schema));
            modelBuilder.Configurations.Add(new BillingScheduleAdminNotificationConfiguration(schema));
            modelBuilder.Configurations.Add(new BillingScheduleDistrictConfiguration(schema));
            modelBuilder.Configurations.Add(new BillingScheduleExcludedCptCodeConfiguration(schema));
            modelBuilder.Configurations.Add(new BillingScheduleExcludedProviderConfiguration(schema));
            modelBuilder.Configurations.Add(new BillingScheduleExcludedServiceCodeConfiguration(schema));
            modelBuilder.Configurations.Add(new CaseLoadConfiguration(schema));
            modelBuilder.Configurations.Add(new CaseLoadCptCodeConfiguration(schema));
            modelBuilder.Configurations.Add(new CaseLoadGoalConfiguration(schema));
            modelBuilder.Configurations.Add(new CaseLoadMethodConfiguration(schema));
            modelBuilder.Configurations.Add(new CaseLoadScriptConfiguration(schema));
            modelBuilder.Configurations.Add(new CaseLoadScriptGoalConfiguration(schema));
            modelBuilder.Configurations.Add(new ClaimsDistrictConfiguration(schema));
            modelBuilder.Configurations.Add(new ClaimsEncounterConfiguration(schema));
            modelBuilder.Configurations.Add(new ClaimsStudentConfiguration(schema));
            modelBuilder.Configurations.Add(new ClaimTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new ClaimValueConfiguration(schema));
            modelBuilder.Configurations.Add(new ClearedAuthTokenConfiguration(schema));
            modelBuilder.Configurations.Add(new ConsoleJobLogConfiguration(schema));
            modelBuilder.Configurations.Add(new ConsoleJobTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new ContactConfiguration(schema));
            modelBuilder.Configurations.Add(new ContactPhoneConfiguration(schema));
            modelBuilder.Configurations.Add(new ContactRoleConfiguration(schema));
            modelBuilder.Configurations.Add(new ContactStatusConfiguration(schema));
            modelBuilder.Configurations.Add(new CountryConfiguration(schema));
            modelBuilder.Configurations.Add(new CountyConfiguration(schema));
            modelBuilder.Configurations.Add(new CptCodeConfiguration(schema));
            modelBuilder.Configurations.Add(new CptCodeAssocationConfiguration(schema));
            modelBuilder.Configurations.Add(new DiagnosisCodeConfiguration(schema));
            modelBuilder.Configurations.Add(new DiagnosisCodeAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new DisabilityCodeConfiguration(schema));
            modelBuilder.Configurations.Add(new DistrictProgressReportDateConfiguration(schema));
            modelBuilder.Configurations.Add(new DocumentConfiguration(schema));
            modelBuilder.Configurations.Add(new DocumentTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new EdiErrorCodeConfiguration(schema));
            modelBuilder.Configurations.Add(new EdiErrorCodeAdminNotificationConfiguration(schema));
            modelBuilder.Configurations.Add(new EdiFileTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new EdiMetaDataConfiguration(schema));
            modelBuilder.Configurations.Add(new EncounterConfiguration(schema));
            modelBuilder.Configurations.Add(new EncounterIdentifierConfiguration(schema));
            modelBuilder.Configurations.Add(new EncounterLocationConfiguration(schema));
            modelBuilder.Configurations.Add(new EncounterReasonForReturnConfiguration(schema));
            modelBuilder.Configurations.Add(new EncounterReturnReasonCategoryConfiguration(schema));
            modelBuilder.Configurations.Add(new EncounterStatusConfiguration(schema));
            modelBuilder.Configurations.Add(new EncounterStudentConfiguration(schema));
            modelBuilder.Configurations.Add(new EncounterStudentCptCodeConfiguration(schema));
            modelBuilder.Configurations.Add(new EncounterStudentGoalConfiguration(schema));
            modelBuilder.Configurations.Add(new EncounterStudentMethodConfiguration(schema));
            modelBuilder.Configurations.Add(new EncounterStudentStatusConfiguration(schema));
            modelBuilder.Configurations.Add(new EscConfiguration(schema));
            modelBuilder.Configurations.Add(new EscSchoolDistrictConfiguration(schema));
            modelBuilder.Configurations.Add(new ESignatureContentConfiguration(schema));
            modelBuilder.Configurations.Add(new EvaluationTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new EvaluationTypesDiagnosisCodeConfiguration(schema));
            modelBuilder.Configurations.Add(new GoalConfiguration(schema));
            modelBuilder.Configurations.Add(new HealthCareClaimConfiguration(schema));
            modelBuilder.Configurations.Add(new IepServiceConfiguration(schema));
            modelBuilder.Configurations.Add(new ImageConfiguration(schema));
            modelBuilder.Configurations.Add(new ImpersonationLogConfiguration(schema));
            modelBuilder.Configurations.Add(new JobsAuditConfiguration(schema));
            modelBuilder.Configurations.Add(new MergedStudentConfiguration(schema));
            modelBuilder.Configurations.Add(new MessageConfiguration(schema));
            modelBuilder.Configurations.Add(new MessageDocumentConfiguration(schema));
            modelBuilder.Configurations.Add(new MessageFilterTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new MessageLinkConfiguration(schema));
            modelBuilder.Configurations.Add(new MethodConfiguration(schema));
            modelBuilder.Configurations.Add(new MigrationProviderCaseNotesHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new NonMspServiceConfiguration(schema));
            modelBuilder.Configurations.Add(new NoteConfiguration(schema));
            modelBuilder.Configurations.Add(new NursingGoalResponseConfiguration(schema));
            modelBuilder.Configurations.Add(new NursingGoalResultConfiguration(schema));
            modelBuilder.Configurations.Add(new PendingReferralConfiguration(schema));
            modelBuilder.Configurations.Add(new PendingReferralReportJobRunConfiguration(schema));
            modelBuilder.Configurations.Add(new PhoneTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new ProgressReportConfiguration(schema));
            modelBuilder.Configurations.Add(new ProviderConfiguration(schema));
            modelBuilder.Configurations.Add(new ProviderAcknowledgmentLogConfiguration(schema));
            modelBuilder.Configurations.Add(new ProviderCaseUploadConfiguration(schema));
            modelBuilder.Configurations.Add(new ProviderCaseUploadDocumentConfiguration(schema));
            modelBuilder.Configurations.Add(new ProviderDoNotBillReasonConfiguration(schema));
            modelBuilder.Configurations.Add(new ProviderEmploymentTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new ProviderEscAssignmentConfiguration(schema));
            modelBuilder.Configurations.Add(new ProviderEscSchoolDistrictConfiguration(schema));
            modelBuilder.Configurations.Add(new ProviderInactivityDateConfiguration(schema));
            modelBuilder.Configurations.Add(new ProviderInactivityReasonConfiguration(schema));
            modelBuilder.Configurations.Add(new ProviderLicensConfiguration(schema));
            modelBuilder.Configurations.Add(new ProviderOdeCertificationConfiguration(schema));
            modelBuilder.Configurations.Add(new ProviderStudentConfiguration(schema));
            modelBuilder.Configurations.Add(new ProviderStudentHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new ProviderStudentSupervisorConfiguration(schema));
            modelBuilder.Configurations.Add(new ProviderTitleConfiguration(schema));
            modelBuilder.Configurations.Add(new ProviderTrainingConfiguration(schema));
            modelBuilder.Configurations.Add(new ReadMessageConfiguration(schema));
            modelBuilder.Configurations.Add(new RefactorLogConfiguration(schema));
            modelBuilder.Configurations.Add(new RevokeAccessConfiguration(schema));
            modelBuilder.Configurations.Add(new RosterValidationConfiguration(schema));
            modelBuilder.Configurations.Add(new RosterValidationDistrictConfiguration(schema));
            modelBuilder.Configurations.Add(new RosterValidationFileConfiguration(schema));
            modelBuilder.Configurations.Add(new RosterValidationResponseFileConfiguration(schema));
            modelBuilder.Configurations.Add(new RosterValidationStudentConfiguration(schema));
            modelBuilder.Configurations.Add(new SchoolConfiguration(schema));
            modelBuilder.Configurations.Add(new SchoolDistrictConfiguration(schema));
            modelBuilder.Configurations.Add(new SchoolDistrictProviderCaseNoteConfiguration(schema));
            modelBuilder.Configurations.Add(new SchoolDistrictRosterConfiguration(schema));
            modelBuilder.Configurations.Add(new SchoolDistrictRosterDocumentConfiguration(schema));
            modelBuilder.Configurations.Add(new SchoolDistrictsAccountAssistantConfiguration(schema));
            modelBuilder.Configurations.Add(new SchoolDistrictsFinancialRepConfiguration(schema));
            modelBuilder.Configurations.Add(new SchoolDistrictsSchoolConfiguration(schema));
            modelBuilder.Configurations.Add(new ServiceCodeConfiguration(schema));
            modelBuilder.Configurations.Add(new ServiceOutcomeConfiguration(schema));
            modelBuilder.Configurations.Add(new ServiceTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new ServiceUnitRuleConfiguration(schema));
            modelBuilder.Configurations.Add(new ServiceUnitTimeSegmentConfiguration(schema));
            modelBuilder.Configurations.Add(new SettingConfiguration(schema));
            modelBuilder.Configurations.Add(new StateConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentDeviationReasonConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentDisabilityCodeConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentDistrictWithdrawalConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentParentalConsentConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentParentalConsentTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentTherapyConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentTherapyScheduleConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new SupervisorProviderStudentReferalSignOffConfiguration(schema));
            modelBuilder.Configurations.Add(new TherapyCaseNoteConfiguration(schema));
            modelBuilder.Configurations.Add(new TherapyGroupConfiguration(schema));
            modelBuilder.Configurations.Add(new TrainingTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new UnmatchedClaimDistrictConfiguration(schema));
            modelBuilder.Configurations.Add(new UnmatchedClaimResponsConfiguration(schema));
            modelBuilder.Configurations.Add(new UserConfiguration(schema));
            modelBuilder.Configurations.Add(new UserPhoneConfiguration(schema));
            modelBuilder.Configurations.Add(new UserRoleConfiguration(schema));
            modelBuilder.Configurations.Add(new UserRoleClaimConfiguration(schema));
            modelBuilder.Configurations.Add(new UserTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new VoucherConfiguration(schema));
            modelBuilder.Configurations.Add(new VoucherBillingResponseFileConfiguration(schema));
            modelBuilder.Configurations.Add(new VoucherTypeConfiguration(schema));
            return modelBuilder;
        }

        partial void InitializePartial();
        partial void DisposePartial(bool disposing);
        partial void OnModelCreatingPartial(System.Data.Entity.DbModelBuilder modelBuilder);

        // Stored Procedures
        public System.Collections.Generic.List<SpBulkInsertClaimsDistrictsReturnModel> SpBulkInsertClaimsDistricts(System.Data.DataTable claimsDistrictData)
        {
            int procResult;
            return SpBulkInsertClaimsDistricts(claimsDistrictData, out procResult);
        }

        public System.Collections.Generic.List<SpBulkInsertClaimsDistrictsReturnModel> SpBulkInsertClaimsDistricts(System.Data.DataTable claimsDistrictData, out int procResult)
        {
            var claimsDistrictDataParam = new SqlParameter { ParameterName = "@ClaimsDistrictData", SqlDbType = System.Data.SqlDbType.Structured, Direction = System.Data.ParameterDirection.Input, Value = claimsDistrictData, TypeName = "dbo.ClaimsDistrictData" };
            if (claimsDistrictDataParam.Value == null)
                claimsDistrictDataParam.Value = System.DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpBulkInsertClaimsDistrictsReturnModel>("EXEC @procResult = [dbo].[SP_Bulk_Insert_ClaimsDistricts] @ClaimsDistrictData", claimsDistrictDataParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpBulkInsertClaimsDistrictsReturnModel>> SpBulkInsertClaimsDistrictsAsync(System.Data.DataTable claimsDistrictData)
        {
            var claimsDistrictDataParam = new SqlParameter { ParameterName = "@ClaimsDistrictData", SqlDbType = System.Data.SqlDbType.Structured, Direction = System.Data.ParameterDirection.Input, Value = claimsDistrictData, TypeName = "dbo.ClaimsDistrictData" };
            if (claimsDistrictDataParam.Value == null)
                claimsDistrictDataParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpBulkInsertClaimsDistrictsReturnModel>("EXEC [dbo].[SP_Bulk_Insert_ClaimsDistricts] @ClaimsDistrictData", claimsDistrictDataParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpBulkInsertClaimsEncountersReturnModel> SpBulkInsertClaimsEncounters(System.Data.DataTable claimsEncounterData)
        {
            int procResult;
            return SpBulkInsertClaimsEncounters(claimsEncounterData, out procResult);
        }

        public System.Collections.Generic.List<SpBulkInsertClaimsEncountersReturnModel> SpBulkInsertClaimsEncounters(System.Data.DataTable claimsEncounterData, out int procResult)
        {
            var claimsEncounterDataParam = new SqlParameter { ParameterName = "@ClaimsEncounterData", SqlDbType = System.Data.SqlDbType.Structured, Direction = System.Data.ParameterDirection.Input, Value = claimsEncounterData, TypeName = "dbo.ClaimsEncounterData" };
            if (claimsEncounterDataParam.Value == null)
                claimsEncounterDataParam.Value = System.DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpBulkInsertClaimsEncountersReturnModel>("EXEC @procResult = [dbo].[SP_Bulk_Insert_ClaimsEncounters] @ClaimsEncounterData", claimsEncounterDataParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpBulkInsertClaimsEncountersReturnModel>> SpBulkInsertClaimsEncountersAsync(System.Data.DataTable claimsEncounterData)
        {
            var claimsEncounterDataParam = new SqlParameter { ParameterName = "@ClaimsEncounterData", SqlDbType = System.Data.SqlDbType.Structured, Direction = System.Data.ParameterDirection.Input, Value = claimsEncounterData, TypeName = "dbo.ClaimsEncounterData" };
            if (claimsEncounterDataParam.Value == null)
                claimsEncounterDataParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpBulkInsertClaimsEncountersReturnModel>("EXEC [dbo].[SP_Bulk_Insert_ClaimsEncounters] @ClaimsEncounterData", claimsEncounterDataParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpBulkInsertClaimsStudentsReturnModel> SpBulkInsertClaimsStudents(System.Data.DataTable claimsStudentData)
        {
            int procResult;
            return SpBulkInsertClaimsStudents(claimsStudentData, out procResult);
        }

        public System.Collections.Generic.List<SpBulkInsertClaimsStudentsReturnModel> SpBulkInsertClaimsStudents(System.Data.DataTable claimsStudentData, out int procResult)
        {
            var claimsStudentDataParam = new SqlParameter { ParameterName = "@ClaimsStudentData", SqlDbType = System.Data.SqlDbType.Structured, Direction = System.Data.ParameterDirection.Input, Value = claimsStudentData, TypeName = "dbo.ClaimsStudentData" };
            if (claimsStudentDataParam.Value == null)
                claimsStudentDataParam.Value = System.DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpBulkInsertClaimsStudentsReturnModel>("EXEC @procResult = [dbo].[SP_Bulk_Insert_ClaimsStudents] @ClaimsStudentData", claimsStudentDataParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpBulkInsertClaimsStudentsReturnModel>> SpBulkInsertClaimsStudentsAsync(System.Data.DataTable claimsStudentData)
        {
            var claimsStudentDataParam = new SqlParameter { ParameterName = "@ClaimsStudentData", SqlDbType = System.Data.SqlDbType.Structured, Direction = System.Data.ParameterDirection.Input, Value = claimsStudentData, TypeName = "dbo.ClaimsStudentData" };
            if (claimsStudentDataParam.Value == null)
                claimsStudentDataParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpBulkInsertClaimsStudentsReturnModel>("EXEC [dbo].[SP_Bulk_Insert_ClaimsStudents] @ClaimsStudentData", claimsStudentDataParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpBulkInsertRosterValidationDistrictsReturnModel> SpBulkInsertRosterValidationDistricts(System.Data.DataTable rosterValidationDistrictData)
        {
            int procResult;
            return SpBulkInsertRosterValidationDistricts(rosterValidationDistrictData, out procResult);
        }

        public System.Collections.Generic.List<SpBulkInsertRosterValidationDistrictsReturnModel> SpBulkInsertRosterValidationDistricts(System.Data.DataTable rosterValidationDistrictData, out int procResult)
        {
            var rosterValidationDistrictDataParam = new SqlParameter { ParameterName = "@RosterValidationDistrictData", SqlDbType = System.Data.SqlDbType.Structured, Direction = System.Data.ParameterDirection.Input, Value = rosterValidationDistrictData, TypeName = "dbo.RosterValidationDistrictData" };
            if (rosterValidationDistrictDataParam.Value == null)
                rosterValidationDistrictDataParam.Value = System.DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpBulkInsertRosterValidationDistrictsReturnModel>("EXEC @procResult = [dbo].[SP_Bulk_Insert_RosterValidationDistricts] @RosterValidationDistrictData", rosterValidationDistrictDataParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpBulkInsertRosterValidationDistrictsReturnModel>> SpBulkInsertRosterValidationDistrictsAsync(System.Data.DataTable rosterValidationDistrictData)
        {
            var rosterValidationDistrictDataParam = new SqlParameter { ParameterName = "@RosterValidationDistrictData", SqlDbType = System.Data.SqlDbType.Structured, Direction = System.Data.ParameterDirection.Input, Value = rosterValidationDistrictData, TypeName = "dbo.RosterValidationDistrictData" };
            if (rosterValidationDistrictDataParam.Value == null)
                rosterValidationDistrictDataParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpBulkInsertRosterValidationDistrictsReturnModel>("EXEC [dbo].[SP_Bulk_Insert_RosterValidationDistricts] @RosterValidationDistrictData", rosterValidationDistrictDataParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpBulkInsertRosterValidationStudentsReturnModel> SpBulkInsertRosterValidationStudents(System.Data.DataTable rosterValidationStudentData)
        {
            int procResult;
            return SpBulkInsertRosterValidationStudents(rosterValidationStudentData, out procResult);
        }

        public System.Collections.Generic.List<SpBulkInsertRosterValidationStudentsReturnModel> SpBulkInsertRosterValidationStudents(System.Data.DataTable rosterValidationStudentData, out int procResult)
        {
            var rosterValidationStudentDataParam = new SqlParameter { ParameterName = "@RosterValidationStudentData", SqlDbType = System.Data.SqlDbType.Structured, Direction = System.Data.ParameterDirection.Input, Value = rosterValidationStudentData, TypeName = "dbo.RosterValidationStudentData" };
            if (rosterValidationStudentDataParam.Value == null)
                rosterValidationStudentDataParam.Value = System.DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpBulkInsertRosterValidationStudentsReturnModel>("EXEC @procResult = [dbo].[SP_Bulk_Insert_RosterValidationStudents] @RosterValidationStudentData", rosterValidationStudentDataParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpBulkInsertRosterValidationStudentsReturnModel>> SpBulkInsertRosterValidationStudentsAsync(System.Data.DataTable rosterValidationStudentData)
        {
            var rosterValidationStudentDataParam = new SqlParameter { ParameterName = "@RosterValidationStudentData", SqlDbType = System.Data.SqlDbType.Structured, Direction = System.Data.ParameterDirection.Input, Value = rosterValidationStudentData, TypeName = "dbo.RosterValidationStudentData" };
            if (rosterValidationStudentDataParam.Value == null)
                rosterValidationStudentDataParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpBulkInsertRosterValidationStudentsReturnModel>("EXEC [dbo].[SP_Bulk_Insert_RosterValidationStudents] @RosterValidationStudentData", rosterValidationStudentDataParam).ToListAsync();

            return procResultData;
        }

    }
}
// </auto-generated>
