// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Model
{
    using Newtonsoft.Json;
    using System;
    using System.ComponentModel.DataAnnotations;
    using System.Data.SqlClient;
    using TrackerEnabledDbContext;

    // ClaimsEncounters
    [Table("ClaimsEncounters", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.0.0")]
    public partial class ClaimsEncounter: IEntity
    {
        // ClaimsEncounter

        ///<summary>
        /// Module
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"Id", Order = 1, TypeName = "int")]
        [Index(@"PK_ClaimsEncounters", 1, IsUnique = true, IsClustered = true)]
        [Key]
        [Display(Name = "Id")]
        public int Id { get; set; } // Id (Primary key)

        [Column(@"ClaimAmount", Order = 2, TypeName = "varchar")]
        [MaxLength(18)]
        [StringLength(18)]
        [Display(Name = "Claim amount")]
        public string ClaimAmount { get; set; } // ClaimAmount (length: 18)

        [Column(@"ProcedureIdentifier", Order = 3, TypeName = "varchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Procedure identifier")]
        public string ProcedureIdentifier { get; set; } // ProcedureIdentifier (length: 50)

        [Column(@"BillingUnits", Order = 4, TypeName = "varchar")]
        [MaxLength(15)]
        [StringLength(15)]
        [Display(Name = "Billing units")]
        public string BillingUnits { get; set; } // BillingUnits (length: 15)

        [Column(@"ServiceDate", Order = 5, TypeName = "datetime")]
        [Display(Name = "Service date")]
        public System.DateTime ServiceDate { get; set; } // ServiceDate

        [Column(@"PhysicianFirstName", Order = 6, TypeName = "varchar")]
        [MaxLength(35)]
        [StringLength(35)]
        [Display(Name = "Physician first name")]
        public string PhysicianFirstName { get; set; } // PhysicianFirstName (length: 35)

        [Column(@"PhysicianLastName", Order = 7, TypeName = "varchar")]
        [MaxLength(60)]
        [StringLength(60)]
        [Display(Name = "Physician last name")]
        public string PhysicianLastName { get; set; } // PhysicianLastName (length: 60)

        [Column(@"PhysicianId", Order = 8, TypeName = "varchar")]
        [MaxLength(80)]
        [StringLength(80)]
        [Display(Name = "Physician ID")]
        public string PhysicianId { get; set; } // PhysicianId (length: 80)

        [Column(@"ReferringProviderFirstName", Order = 9, TypeName = "varchar")]
        [MaxLength(35)]
        [StringLength(35)]
        [Display(Name = "Referring provider first name")]
        public string ReferringProviderFirstName { get; set; } // ReferringProviderFirstName (length: 35)

        [Column(@"ReferringProviderLastName", Order = 10, TypeName = "varchar")]
        [MaxLength(60)]
        [StringLength(60)]
        [Display(Name = "Referring provider last name")]
        public string ReferringProviderLastName { get; set; } // ReferringProviderLastName (length: 60)

        [Column(@"ReasonForServiceCode", Order = 11, TypeName = "varchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Reason for service code")]
        public string ReasonForServiceCode { get; set; } // ReasonForServiceCode (length: 50)

        [Column(@"ReferringProviderId", Order = 12, TypeName = "varchar")]
        [MaxLength(80)]
        [StringLength(80)]
        [Display(Name = "Referring provider ID")]
        public string ReferringProviderId { get; set; } // ReferringProviderId (length: 80)

        [Column(@"IsTelehealth", Order = 13, TypeName = "bit")]
        [Display(Name = "Is telehealth")]
        public bool IsTelehealth { get; set; } // IsTelehealth

        [Column(@"Rebilled", Order = 14, TypeName = "bit")]
        [Display(Name = "Rebilled")]
        public bool Rebilled { get; set; } // Rebilled

        [Column(@"Response", Order = 15, TypeName = "bit")]
        [Display(Name = "Response")]
        public bool Response { get; set; } // Response

        [Column(@"EdiErrorCodeId", Order = 16, TypeName = "int")]
        [Display(Name = "Edi error code ID")]
        public int? EdiErrorCodeId { get; set; } // EdiErrorCodeId

        [Column(@"ClaimId", Order = 17, TypeName = "varchar")]
        [MaxLength(15)]
        [StringLength(15)]
        [Display(Name = "Claim ID")]
        public string ClaimId { get; set; } // ClaimId (length: 15)

        [Column(@"ClaimsStudentId", Order = 18, TypeName = "int")]
        [Display(Name = "Claims student ID")]
        public int? ClaimsStudentId { get; set; } // ClaimsStudentId

        [Column(@"EncounterStudentId", Order = 19, TypeName = "int")]
        [Display(Name = "Encounter student ID")]
        public int EncounterStudentId { get; set; } // EncounterStudentId

        [Column(@"AggregateId", Order = 20, TypeName = "int")]
        [Index(@"IX_ClaimsEncounters_AggregateId", 1, IsUnique = false, IsClustered = false)]
        [Display(Name = "Aggregate ID")]
        public int? AggregateId { get; set; } // AggregateId

        [Column(@"EncounterStudentCptCodeId", Order = 21, TypeName = "int")]
        [Display(Name = "Encounter student cpt code ID")]
        public int EncounterStudentCptCodeId { get; set; } // EncounterStudentCptCodeId

        [Column(@"PaidAmount", Order = 22, TypeName = "varchar")]
        [MaxLength(18)]
        [StringLength(18)]
        [Display(Name = "Paid amount")]
        public string PaidAmount { get; set; } // PaidAmount (length: 18)

        [Column(@"VoucherDate", Order = 23, TypeName = "datetime")]
        [Display(Name = "Voucher date")]
        public System.DateTime? VoucherDate { get; set; } // VoucherDate

        [Column(@"ReferenceNumber", Order = 24, TypeName = "varchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Reference number")]
        public string ReferenceNumber { get; set; } // ReferenceNumber (length: 50)

        [Column(@"AdjustmentReasonCode", Order = 25, TypeName = "varchar")]
        [MaxLength(5)]
        [StringLength(5)]
        [Display(Name = "Adjustment reason code")]
        public string AdjustmentReasonCode { get; set; } // AdjustmentReasonCode (length: 5)

        [Column(@"AdjustmentAmount", Order = 26, TypeName = "varchar")]
        [MaxLength(20)]
        [StringLength(20)]
        [Display(Name = "Adjustment amount")]
        public string AdjustmentAmount { get; set; } // AdjustmentAmount (length: 20)

        [Column(@"ControlNumberPrefix", Order = 27, TypeName = "varchar")]
        [MaxLength(3)]
        [StringLength(3)]
        [Display(Name = "Control number prefix")]
        public string ControlNumberPrefix { get; set; } // ControlNumberPrefix (length: 3)

        [Column(@"ReversedClaimId", Order = 28, TypeName = "int")]
        [Display(Name = "Reversed claim ID")]
        public int? ReversedClaimId { get; set; } // ReversedClaimId

        // Foreign keys

        /// <summary>
        /// Parent EncounterStudentCptCode pointed by [ClaimsEncounters].([AggregateId]) (FK_ClaimsEncounters_AggregateCptCode)
        /// </summary>
        [InverseProperty("ClaimsEncounters_AggregateId")]
        [ForeignKey("AggregateId")] public EncounterStudentCptCode Aggregate { get; set; } // FK_ClaimsEncounters_AggregateCptCode

        /// <summary>
        /// Parent ClaimsStudent pointed by [ClaimsEncounters].([ClaimsStudentId]) (FK_ClaimsEncounters_ClaimsStudent)
        /// </summary>
        [InverseProperty("ClaimsEncounters")]
        [ForeignKey("ClaimsStudentId")] public ClaimsStudent ClaimsStudent { get; set; } // FK_ClaimsEncounters_ClaimsStudent

        /// <summary>
        /// Parent EdiErrorCode pointed by [ClaimsEncounters].([EdiErrorCodeId]) (FK_ClaimsEncounters_EdiErrorCode)
        /// </summary>
        [InverseProperty("ClaimsEncounters")]
        [ForeignKey("EdiErrorCodeId")] public EdiErrorCode EdiErrorCode { get; set; } // FK_ClaimsEncounters_EdiErrorCode

        /// <summary>
        /// Parent EncounterStudentCptCode pointed by [ClaimsEncounters].([EncounterStudentCptCodeId]) (FK_ClaimsEncounters_EncounterStudentCptCode)
        /// </summary>
        [InverseProperty("ClaimsEncounters_EncounterStudentCptCodeId")]
        [ForeignKey("EncounterStudentCptCodeId")] public EncounterStudentCptCode EncounterStudentCptCode_EncounterStudentCptCodeId { get; set; } // FK_ClaimsEncounters_EncounterStudentCptCode

        /// <summary>
        /// Parent EncounterStudent pointed by [ClaimsEncounters].([EncounterStudentId]) (FK_ClaimsEncounters_EncounterStudent)
        /// </summary>
        [InverseProperty("ClaimsEncounters")]
        [ForeignKey("EncounterStudentId")] public EncounterStudent EncounterStudent { get; set; } // FK_ClaimsEncounters_EncounterStudent

        /// <summary>
        /// Parent HealthCareClaim pointed by [ClaimsEncounters].([ReversedClaimId]) (FK_ClaimsEncounters_ReversedClaim)
        /// </summary>
        [InverseProperty("ClaimsEncounters")]
        [ForeignKey("ReversedClaimId")] public HealthCareClaim HealthCareClaim { get; set; } // FK_ClaimsEncounters_ReversedClaim

        public ClaimsEncounter()
        {
            IsTelehealth = false;
            Rebilled = false;
            Response = false;
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>
