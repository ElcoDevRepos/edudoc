// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Model
{
    using Newtonsoft.Json;
    using System;
    using System.ComponentModel.DataAnnotations;
    using System.Data.SqlClient;
    using TrackerEnabledDbContext;

    // EncounterStudents
    [Table("EncounterStudents", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.0.0")]
    public partial class EncounterStudent: IEntity
    {
        // EncounterStudent
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"Id", Order = 1, TypeName = "int")]
        [Index(@"PK_EncounterStudents", 1, IsUnique = true, IsClustered = true)]
        [Key]
        [Display(Name = "Id")]
        public int Id { get; set; } // Id (Primary key)

        [Column(@"EncounterId", Order = 2, TypeName = "int")]
        [Index(@"IX_EncounterId_Archived", 1, IsUnique = false, IsClustered = false)]
        [Index(@"IX_EncounterStudents_StudentDeviationId_EncounterId_EncounterStatusId_ESignedById_Archived", 2, IsUnique = false, IsClustered = false)]
        [Display(Name = "Encounter ID")]
        public int EncounterId { get; set; } // EncounterId

        [Column(@"StudentId", Order = 3, TypeName = "int")]
        [Index(@"IX_EncounterStudents_StudentId", 1, IsUnique = false, IsClustered = false)]
        [Display(Name = "Student ID")]
        public int StudentId { get; set; } // StudentId

        [Column(@"EncounterStatusId", Order = 4, TypeName = "int")]
        [Index(@"IX_EncounterStudents_StudentDeviationId_EncounterId_EncounterStatusId_ESignedById_Archived", 3, IsUnique = false, IsClustered = false)]
        [Index(@"IX_EncounterStudents_EncounterStatusId_SupervisorDateESigned_ESignedById_Archived", 1, IsUnique = false, IsClustered = false)]
        [Display(Name = "Encounter status ID")]
        public int EncounterStatusId { get; set; } // EncounterStatusId

        [Column(@"EncounterLocationId", Order = 5, TypeName = "int")]
        [Display(Name = "Encounter location ID")]
        public int EncounterLocationId { get; set; } // EncounterLocationId

        [Column(@"ReasonForReturn", Order = 6, TypeName = "varchar")]
        [MaxLength(250)]
        [StringLength(250)]
        [Display(Name = "Reason for return")]
        public string ReasonForReturn { get; set; } // ReasonForReturn (length: 250)

        [Column(@"EncounterNumber", Order = 7, TypeName = "varchar")]
        [MaxLength(14)]
        [StringLength(14)]
        [Display(Name = "Encounter number")]
        public string EncounterNumber { get; set; } // EncounterNumber (length: 14)

        [Column(@"CaseLoadId", Order = 8, TypeName = "int")]
        [Display(Name = "Case load ID")]
        public int? CaseLoadId { get; set; } // CaseLoadId

        [Column(@"StudentTherapyScheduleId", Order = 9, TypeName = "int")]
        [Index(@"IX_StudentTherapyScheduleId", 1, IsUnique = false, IsClustered = false)]
        [Display(Name = "Student therapy schedule ID")]
        public int? StudentTherapyScheduleId { get; set; } // StudentTherapyScheduleId

        [Column(@"EncounterStartTime", Order = 10, TypeName = "time")]
        [Display(Name = "Encounter start time")]
        public System.TimeSpan EncounterStartTime { get; set; } // EncounterStartTime

        [Column(@"EncounterEndTime", Order = 11, TypeName = "time")]
        [Display(Name = "Encounter end time")]
        public System.TimeSpan EncounterEndTime { get; set; } // EncounterEndTime

        [Column(@"EncounterDate", Order = 12, TypeName = "datetime")]
        [Display(Name = "Encounter date")]
        public System.DateTime EncounterDate { get; set; } // EncounterDate

        [Column(@"SupervisorComments", Order = 13, TypeName = "varchar")]
        [MaxLength(1000)]
        [StringLength(1000)]
        [Display(Name = "Supervisor comments")]
        public string SupervisorComments { get; set; } // SupervisorComments (length: 1000)

        [Column(@"ESignatureText", Order = 14, TypeName = "varchar")]
        [MaxLength(1000)]
        [StringLength(1000)]
        [Display(Name = "Es ignature text")]
        public string ESignatureText { get; set; } // ESignatureText (length: 1000)

        [Column(@"ESignedById", Order = 15, TypeName = "int")]
        [Index(@"IX_EncounterStudents_StudentDeviationId_EncounterId_EncounterStatusId_ESignedById_Archived", 4, IsUnique = false, IsClustered = false)]
        [Index(@"IX_EncounterStudents_EncounterStatusId_SupervisorDateESigned_ESignedById_Archived", 3, IsUnique = false, IsClustered = false)]
        [Display(Name = "Es igned by ID")]
        public int? ESignedById { get; set; } // ESignedById

        [Column(@"SupervisorESignatureText", Order = 16, TypeName = "varchar")]
        [MaxLength(1000)]
        [StringLength(1000)]
        [Display(Name = "Supervisor es ignature text")]
        public string SupervisorESignatureText { get; set; } // SupervisorESignatureText (length: 1000)

        [Column(@"SupervisorESignedById", Order = 17, TypeName = "int")]
        [Display(Name = "Supervisor es igned by ID")]
        public int? SupervisorESignedById { get; set; } // SupervisorESignedById

        [Column(@"DateESigned", Order = 18, TypeName = "datetime")]
        [Display(Name = "Date es igned")]
        public System.DateTime? DateESigned { get; set; } // DateESigned

        [Column(@"SupervisorDateESigned", Order = 19, TypeName = "datetime")]
        [Index(@"IX_EncounterStudents_EncounterStatusId_SupervisorDateESigned_ESignedById_Archived", 2, IsUnique = false, IsClustered = false)]
        [Display(Name = "Supervisor date es igned")]
        public System.DateTime? SupervisorDateESigned { get; set; } // SupervisorDateESigned

        [Column(@"StudentDeviationReasonId", Order = 20, TypeName = "int")]
        [Index(@"IX_EncounterStudents_StudentDeviationId_EncounterId_EncounterStatusId_ESignedById_Archived", 1, IsUnique = false, IsClustered = false)]
        [Display(Name = "Student deviation reason ID")]
        public int? StudentDeviationReasonId { get; set; } // StudentDeviationReasonId

        [Column(@"TherapyCaseNotes", Order = 21, TypeName = "varchar")]
        [MaxLength(6000)]
        [StringLength(6000)]
        [Display(Name = "Therapy case notes")]
        public string TherapyCaseNotes { get; set; } // TherapyCaseNotes (length: 6000)

        [Column(@"AbandonmentNotes", Order = 22, TypeName = "varchar")]
        [MaxLength(1000)]
        [StringLength(1000)]
        [Display(Name = "Abandonment notes")]
        public string AbandonmentNotes { get; set; } // AbandonmentNotes (length: 1000)

        [Column(@"IsTelehealth", Order = 23, TypeName = "bit")]
        [Display(Name = "Is telehealth")]
        public bool IsTelehealth { get; set; } // IsTelehealth

        [Column(@"DiagnosisCodeId", Order = 24, TypeName = "int")]
        [Display(Name = "Diagnosis code ID")]
        public int? DiagnosisCodeId { get; set; } // DiagnosisCodeId

        [Column(@"DocumentTypeId", Order = 25, TypeName = "int")]
        [Display(Name = "Document type ID")]
        public int? DocumentTypeId { get; set; } // DocumentTypeId

        [Column(@"Archived", Order = 26, TypeName = "bit")]
        [Index(@"IX_EncounterId_Archived", 2, IsUnique = false, IsClustered = false)]
        [Index(@"IX_EncounterStudents_StudentDeviationId_EncounterId_EncounterStatusId_ESignedById_Archived", 5, IsUnique = false, IsClustered = false)]
        [Index(@"IX_EncounterStudents_EncounterStatusId_SupervisorDateESigned_ESignedById_Archived", 4, IsUnique = false, IsClustered = false)]
        [Display(Name = "Archived")]
        public bool Archived { get; set; } // Archived

        [Column(@"CreatedById", Order = 27, TypeName = "int")]
        [Display(Name = "Created by ID")]
        public int CreatedById { get; set; } // CreatedById

        [Column(@"ModifiedById", Order = 28, TypeName = "int")]
        [Display(Name = "Modified by ID")]
        public int? ModifiedById { get; set; } // ModifiedById

        [Column(@"DateCreated", Order = 29, TypeName = "datetime")]
        [Display(Name = "Date created")]
        public System.DateTime? DateCreated { get; set; } // DateCreated

        [Column(@"DateModified", Order = 30, TypeName = "datetime")]
        [Display(Name = "Date modified")]
        public System.DateTime? DateModified { get; set; } // DateModified

        // Reverse navigation

        /// <summary>
        /// Child BillingFailures where [BillingFailures].[EncounterStudentId] point to this entity (FK_BillingFailures_EncounterStudent)
        /// </summary>
        public System.Collections.Generic.ICollection<BillingFailure> BillingFailures { get; set; } // BillingFailures.FK_BillingFailures_EncounterStudent
        /// <summary>
        /// Child ClaimsEncounters where [ClaimsEncounters].[EncounterStudentId] point to this entity (FK_ClaimsEncounters_EncounterStudent)
        /// </summary>
        public System.Collections.Generic.ICollection<ClaimsEncounter> ClaimsEncounters { get; set; } // ClaimsEncounters.FK_ClaimsEncounters_EncounterStudent
        /// <summary>
        /// Child EncounterStudentCptCodes where [EncounterStudentCptCodes].[EncounterStudentId] point to this entity (FK_EncounterStudentCptCodes_EncounterStudent)
        /// </summary>
        public System.Collections.Generic.ICollection<EncounterStudentCptCode> EncounterStudentCptCodes { get; set; } // EncounterStudentCptCodes.FK_EncounterStudentCptCodes_EncounterStudent
        /// <summary>
        /// Child EncounterStudentGoals where [EncounterStudentGoals].[EncounterStudentId] point to this entity (FK_EncounterStudentGoals_EncounterStudent)
        /// </summary>
        public System.Collections.Generic.ICollection<EncounterStudentGoal> EncounterStudentGoals { get; set; } // EncounterStudentGoals.FK_EncounterStudentGoals_EncounterStudent
        /// <summary>
        /// Child EncounterStudentMethods where [EncounterStudentMethods].[EncounterStudentId] point to this entity (FK_EncounterStudentMethods_EncounterStudent)
        /// </summary>
        public System.Collections.Generic.ICollection<EncounterStudentMethod> EncounterStudentMethods { get; set; } // EncounterStudentMethods.FK_EncounterStudentMethods_EncounterStudent
        /// <summary>
        /// Child EncounterStudentStatus where [EncounterStudentStatuses].[EncounterStudentId] point to this entity (FK_EncounterStudentStatuses_EncounterStudent)
        /// </summary>
        public System.Collections.Generic.ICollection<EncounterStudentStatus> EncounterStudentStatus { get; set; } // EncounterStudentStatuses.FK_EncounterStudentStatuses_EncounterStudent

        // Foreign keys

        /// <summary>
        /// Parent CaseLoad pointed by [EncounterStudents].([CaseLoadId]) (FK_EncounterStudents_CaseLoad)
        /// </summary>
        [InverseProperty("EncounterStudents")]
        [ForeignKey("CaseLoadId")] public CaseLoad CaseLoad { get; set; } // FK_EncounterStudents_CaseLoad

        /// <summary>
        /// Parent User pointed by [EncounterStudents].([CreatedById]) (FK_EncounterStudents_CreatedBy)
        /// </summary>
        [InverseProperty("EncounterStudents_CreatedById")]
        [ForeignKey("CreatedById")] public User CreatedBy { get; set; } // FK_EncounterStudents_CreatedBy

        /// <summary>
        /// Parent DiagnosisCode pointed by [EncounterStudents].([DiagnosisCodeId]) (FK_EncounterStudents_DiagnosisCodes)
        /// </summary>
        [InverseProperty("EncounterStudents")]
        [ForeignKey("DiagnosisCodeId")] public DiagnosisCode DiagnosisCode { get; set; } // FK_EncounterStudents_DiagnosisCodes

        /// <summary>
        /// Parent DocumentType pointed by [EncounterStudents].([DocumentTypeId]) (FK_EncounterStudents_DocumentTypes)
        /// </summary>
        [InverseProperty("EncounterStudents")]
        [ForeignKey("DocumentTypeId")] public DocumentType DocumentType { get; set; } // FK_EncounterStudents_DocumentTypes

        /// <summary>
        /// Parent Encounter pointed by [EncounterStudents].([EncounterId]) (FK_EncounterStudents_Encounter)
        /// </summary>
        [InverseProperty("EncounterStudents")]
        [ForeignKey("EncounterId")] public Encounter Encounter { get; set; } // FK_EncounterStudents_Encounter

        /// <summary>
        /// Parent EncounterLocation pointed by [EncounterStudents].([EncounterLocationId]) (FK_EncounterStudents_EncounterLocation)
        /// </summary>
        [InverseProperty("EncounterStudents")]
        [ForeignKey("EncounterLocationId")] public EncounterLocation EncounterLocation { get; set; } // FK_EncounterStudents_EncounterLocation

        /// <summary>
        /// Parent EncounterStatus pointed by [EncounterStudents].([EncounterStatusId]) (FK_EncounterStudents_EncounterStatus)
        /// </summary>
        [InverseProperty("EncounterStudents")]
        [ForeignKey("EncounterStatusId")] public EncounterStatus EncounterStatus { get; set; } // FK_EncounterStudents_EncounterStatus

        /// <summary>
        /// Parent User pointed by [EncounterStudents].([ESignedById]) (FK_EncounterStudents_ESignedBy)
        /// </summary>
        [InverseProperty("EncounterStudents_ESignedById")]
        [ForeignKey("ESignedById")] public User ESignedBy { get; set; } // FK_EncounterStudents_ESignedBy

        /// <summary>
        /// Parent User pointed by [EncounterStudents].([ModifiedById]) (FK_EncounterStudents_ModifiedBy)
        /// </summary>
        [InverseProperty("EncounterStudents_ModifiedById")]
        [ForeignKey("ModifiedById")] public User ModifiedBy { get; set; } // FK_EncounterStudents_ModifiedBy

        /// <summary>
        /// Parent StudentDeviationReason pointed by [EncounterStudents].([StudentDeviationReasonId]) (FK_EncounterStudents_StudentDeviationReason)
        /// </summary>
        [InverseProperty("EncounterStudents")]
        [ForeignKey("StudentDeviationReasonId")] public StudentDeviationReason StudentDeviationReason { get; set; } // FK_EncounterStudents_StudentDeviationReason

        /// <summary>
        /// Parent Student pointed by [EncounterStudents].([StudentId]) (FK_EncounterStudents_Student)
        /// </summary>
        [InverseProperty("EncounterStudents")]
        [ForeignKey("StudentId")] public Student Student { get; set; } // FK_EncounterStudents_Student

        /// <summary>
        /// Parent StudentTherapySchedule pointed by [EncounterStudents].([StudentTherapyScheduleId]) (FK_EncounterStudents_StudentTherapySchedules)
        /// </summary>
        [InverseProperty("EncounterStudents")]
        [ForeignKey("StudentTherapyScheduleId")] public StudentTherapySchedule StudentTherapySchedule { get; set; } // FK_EncounterStudents_StudentTherapySchedules

        /// <summary>
        /// Parent User pointed by [EncounterStudents].([SupervisorESignedById]) (FK_EncounterStudents_SupervisorESignedBy)
        /// </summary>
        [InverseProperty("EncounterStudents_SupervisorESignedById")]
        [ForeignKey("SupervisorESignedById")] public User SupervisorESignedBy { get; set; } // FK_EncounterStudents_SupervisorESignedBy

        public EncounterStudent()
        {
            EncounterStatusId = 1;
            IsTelehealth = false;
            Archived = false;
            CreatedById = 1;
            DateCreated = System.DateTime.UtcNow;
            EncounterStudentCptCodes = new System.Collections.Generic.List<EncounterStudentCptCode>();
            EncounterStudentGoals = new System.Collections.Generic.List<EncounterStudentGoal>();
            EncounterStudentMethods = new System.Collections.Generic.List<EncounterStudentMethod>();
            EncounterStudentStatus = new System.Collections.Generic.List<EncounterStudentStatus>();
            BillingFailures = new System.Collections.Generic.List<BillingFailure>();
            ClaimsEncounters = new System.Collections.Generic.List<ClaimsEncounter>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>
