// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Model
{
    using Newtonsoft.Json;
    using System;
    using System.ComponentModel.DataAnnotations;
    using System.Data.SqlClient;
    using TrackerEnabledDbContext;

    // ProviderInactivityDates
    [Table("ProviderInactivityDates", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.0.0")]
    public partial class ProviderInactivityDate: IEntity
    {
        // ProviderInactivityDate
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"Id", Order = 1, TypeName = "int")]
        [Index(@"PK_ProviderInactivityDates", 1, IsUnique = true, IsClustered = true)]
        [Key]
        [Display(Name = "Id")]
        public int Id { get; set; } // Id (Primary key)

        [Column(@"ProviderId", Order = 2, TypeName = "int")]
        [Display(Name = "Provider ID")]
        public int ProviderId { get; set; } // ProviderId

        [Column(@"ProviderInactivityStartDate", Order = 3, TypeName = "datetime")]
        [Display(Name = "Provider inactivity start date")]
        public System.DateTime ProviderInactivityStartDate { get; set; } // ProviderInactivityStartDate

        [Column(@"ProviderInactivityEndDate", Order = 4, TypeName = "datetime")]
        [Display(Name = "Provider inactivity end date")]
        public System.DateTime? ProviderInactivityEndDate { get; set; } // ProviderInactivityEndDate

        [Column(@"ProviderDoNotBillReasonId", Order = 5, TypeName = "int")]
        [Display(Name = "Provider do not bill reason ID")]
        public int ProviderDoNotBillReasonId { get; set; } // ProviderDoNotBillReasonId

        [Column(@"Archived", Order = 6, TypeName = "bit")]
        [Display(Name = "Archived")]
        public bool Archived { get; set; } // Archived

        // Foreign keys

        /// <summary>
        /// Parent ProviderDoNotBillReason pointed by [ProviderInactivityDates].([ProviderDoNotBillReasonId]) (FK_ProviderInactivityDates_ProviderDoNotBillReasons)
        /// </summary>
        [InverseProperty("ProviderInactivityDates")]
        [ForeignKey("ProviderDoNotBillReasonId")] public ProviderDoNotBillReason ProviderDoNotBillReason { get; set; } // FK_ProviderInactivityDates_ProviderDoNotBillReasons

        /// <summary>
        /// Parent Provider pointed by [ProviderInactivityDates].([ProviderId]) (FK_ProviderInactivityDates_Providers)
        /// </summary>
        [InverseProperty("ProviderInactivityDates")]
        [ForeignKey("ProviderId")] public Provider Provider { get; set; } // FK_ProviderInactivityDates_Providers

        public ProviderInactivityDate()
        {
            ProviderDoNotBillReasonId = 1;
            Archived = false;
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>
