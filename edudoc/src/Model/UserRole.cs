// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Model
{
    using Newtonsoft.Json;
    using System;
    using System.ComponentModel.DataAnnotations;
    using System.Data.SqlClient;
    using TrackerEnabledDbContext;

    // UserRoles
    [Table("UserRoles", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.0.0")]
    public partial class UserRole: IEntity, IBasicNameEntity
    {
        // UserRole
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"Id", Order = 1, TypeName = "int")]
        [Index(@"PK_UserRoles", 1, IsUnique = true, IsClustered = true)]
        [Key]
        [Display(Name = "Id")]
        public int Id { get; set; } // Id (Primary key)

        [Column(@"Name", Order = 2, TypeName = "varchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Name")]
        public string Name { get; set; } // Name (length: 50)

        [Column(@"Description", Order = 3, TypeName = "varchar")]
        [MaxLength(500)]
        [StringLength(500)]
        [Display(Name = "Description")]
        public string Description { get; set; } // Description (length: 500)

        [Column(@"IsEditable", Order = 4, TypeName = "bit")]
        [Display(Name = "Is editable")]
        public bool IsEditable { get; set; } // IsEditable

        [Column(@"UserTypeId", Order = 5, TypeName = "int")]
        [Display(Name = "User type ID")]
        public int UserTypeId { get; set; } // UserTypeId

        [Column(@"CreatedById", Order = 6, TypeName = "int")]
        [Display(Name = "Created by ID")]
        public int? CreatedById { get; set; } // CreatedById

        [Column(@"ModifiedById", Order = 7, TypeName = "int")]
        [Display(Name = "Modified by ID")]
        public int? ModifiedById { get; set; } // ModifiedById

        [Column(@"DateCreated", Order = 8, TypeName = "datetime")]
        [Display(Name = "Date created")]
        public System.DateTime? DateCreated { get; set; } // DateCreated

        [Column(@"DateModified", Order = 9, TypeName = "datetime")]
        [Display(Name = "Date modified")]
        public System.DateTime? DateModified { get; set; } // DateModified

        [Column(@"Archived", Order = 10, TypeName = "bit")]
        [Display(Name = "Archived")]
        public bool Archived { get; set; } // Archived

        // Reverse navigation

        /// <summary>
        /// Child AuthUsers where [AuthUsers].[RoleId] point to this entity (FK_AuthUsers_UserRoles)
        /// </summary>
        public System.Collections.Generic.ICollection<AuthUser> AuthUsers { get; set; } // AuthUsers.FK_AuthUsers_UserRoles
        /// <summary>
        /// Child UserRoleClaims where [UserRoleClaims].[RoleId] point to this entity (FK_UserRoleClaims_UserRoles)
        /// </summary>
        public System.Collections.Generic.ICollection<UserRoleClaim> UserRoleClaims { get; set; } // UserRoleClaims.FK_UserRoleClaims_UserRoles

        // Foreign keys

        /// <summary>
        /// Parent User pointed by [UserRoles].([CreatedById]) (FK_UserRoles_CreatedBy)
        /// </summary>
        [InverseProperty("UserRoles_CreatedById")]
        [ForeignKey("CreatedById")] public User CreatedBy { get; set; } // FK_UserRoles_CreatedBy

        /// <summary>
        /// Parent User pointed by [UserRoles].([ModifiedById]) (FK_UserRoles_ModifiedBy)
        /// </summary>
        [InverseProperty("UserRoles_ModifiedById")]
        [ForeignKey("ModifiedById")] public User ModifiedBy { get; set; } // FK_UserRoles_ModifiedBy

        /// <summary>
        /// Parent UserType pointed by [UserRoles].([UserTypeId]) (FK_UserRoles_UserType)
        /// </summary>
        [InverseProperty("UserRoles")]
        [ForeignKey("UserTypeId")] public UserType UserType { get; set; } // FK_UserRoles_UserType

        public UserRole()
        {
            Description = "";
            IsEditable = true;
            UserTypeId = 1;
            DateCreated = System.DateTime.UtcNow;
            Archived = false;
            AuthUsers = new System.Collections.Generic.List<AuthUser>();
            UserRoleClaims = new System.Collections.Generic.List<UserRoleClaim>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>
