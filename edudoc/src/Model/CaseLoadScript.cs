// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Model
{
    using Newtonsoft.Json;
    using System;
    using System.ComponentModel.DataAnnotations;
    using System.Data.SqlClient;
    using TrackerEnabledDbContext;

    // CaseLoadScripts
    [Table("CaseLoadScripts", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.0.0")]
    public partial class CaseLoadScript: IEntity
    {
        // CaseLoadScript
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"Id", Order = 1, TypeName = "int")]
        [Index(@"PK_CaseLoadScripts", 1, IsUnique = true, IsClustered = true)]
        [Key]
        [Display(Name = "Id")]
        public int Id { get; set; } // Id (Primary key)

        [Column(@"NPI", Order = 2, TypeName = "varchar")]
        [MaxLength(10)]
        [StringLength(10)]
        [Display(Name = "Npi")]
        public string Npi { get; set; } // NPI (length: 10)

        [Column(@"DiagnosisCodeId", Order = 3, TypeName = "int")]
        [Display(Name = "Diagnosis code ID")]
        public int? DiagnosisCodeId { get; set; } // DiagnosisCodeId

        [Column(@"DoctorFirstName", Order = 4, TypeName = "varchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Doctor first name")]
        public string DoctorFirstName { get; set; } // DoctorFirstName (length: 50)

        [Column(@"DoctorLastName", Order = 5, TypeName = "varchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Doctor last name")]
        public string DoctorLastName { get; set; } // DoctorLastName (length: 50)

        [Column(@"InitiationDate", Order = 6, TypeName = "datetime")]
        [Display(Name = "Initiation date")]
        public System.DateTime InitiationDate { get; set; } // InitiationDate

        [Column(@"ExpirationDate", Order = 7, TypeName = "datetime")]
        [Display(Name = "Expiration date")]
        public System.DateTime? ExpirationDate { get; set; } // ExpirationDate

        [Column(@"FileName", Order = 8, TypeName = "varchar")]
        [MaxLength(200)]
        [StringLength(200)]
        [Display(Name = "File name")]
        public string FileName { get; set; } // FileName (length: 200)

        [Column(@"FilePath", Order = 9, TypeName = "varchar")]
        [MaxLength(200)]
        [StringLength(200)]
        [Display(Name = "File path")]
        public string FilePath { get; set; } // FilePath (length: 200)

        [Column(@"CaseLoadId", Order = 10, TypeName = "int")]
        [Display(Name = "Case load ID")]
        public int CaseLoadId { get; set; } // CaseLoadId

        [Column(@"Archived", Order = 11, TypeName = "bit")]
        [Display(Name = "Archived")]
        public bool Archived { get; set; } // Archived

        [Column(@"UploadedById", Order = 12, TypeName = "int")]
        [Display(Name = "Uploaded by ID")]
        public int? UploadedById { get; set; } // UploadedById

        [Column(@"ModifiedById", Order = 13, TypeName = "int")]
        [Display(Name = "Modified by ID")]
        public int? ModifiedById { get; set; } // ModifiedById

        [Column(@"DateUpload", Order = 14, TypeName = "datetime")]
        [Display(Name = "Date upload")]
        public System.DateTime DateUpload { get; set; } // DateUpload

        [Column(@"DateModified", Order = 15, TypeName = "datetime")]
        [Display(Name = "Date modified")]
        public System.DateTime? DateModified { get; set; } // DateModified

        // Reverse navigation

        /// <summary>
        /// Child CaseLoadScriptGoals where [CaseLoadScriptGoals].[CaseLoadScriptId] point to this entity (FK_CaseLoadScriptGoals_CaseLoadScript)
        /// </summary>
        public System.Collections.Generic.ICollection<CaseLoadScriptGoal> CaseLoadScriptGoals { get; set; } // CaseLoadScriptGoals.FK_CaseLoadScriptGoals_CaseLoadScript

        // Foreign keys

        /// <summary>
        /// Parent CaseLoad pointed by [CaseLoadScripts].([CaseLoadId]) (FK_CaseLoadScripts_CaseLoad)
        /// </summary>
        [InverseProperty("CaseLoadScripts")]
        [ForeignKey("CaseLoadId")] public CaseLoad CaseLoad { get; set; } // FK_CaseLoadScripts_CaseLoad

        /// <summary>
        /// Parent DiagnosisCode pointed by [CaseLoadScripts].([DiagnosisCodeId]) (FK_CaseLoadScripts_DiagnosisCodes)
        /// </summary>
        [InverseProperty("CaseLoadScripts")]
        [ForeignKey("DiagnosisCodeId")] public DiagnosisCode DiagnosisCode { get; set; } // FK_CaseLoadScripts_DiagnosisCodes

        /// <summary>
        /// Parent User pointed by [CaseLoadScripts].([ModifiedById]) (FK_CaseLoadScripts_ModifiedBy)
        /// </summary>
        [InverseProperty("CaseLoadScripts_ModifiedById")]
        [ForeignKey("ModifiedById")] public User ModifiedBy { get; set; } // FK_CaseLoadScripts_ModifiedBy

        /// <summary>
        /// Parent User pointed by [CaseLoadScripts].([UploadedById]) (FK_CaseLoadScripts_UploadedBy)
        /// </summary>
        [InverseProperty("CaseLoadScripts_UploadedById")]
        [ForeignKey("UploadedById")] public User UploadedBy { get; set; } // FK_CaseLoadScripts_UploadedBy

        public CaseLoadScript()
        {
            Archived = false;
            DateUpload = System.DateTime.UtcNow;
            CaseLoadScriptGoals = new System.Collections.Generic.List<CaseLoadScriptGoal>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>
