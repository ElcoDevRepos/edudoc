// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Model
{
    using Newtonsoft.Json;
    using System;
    using System.ComponentModel.DataAnnotations;
    using System.Data.SqlClient;
    using TrackerEnabledDbContext;

    // Encounters
    [Table("Encounters", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.0.0")]
    public partial class Encounter: IEntity
    {
        // Encounter

        ///<summary>
        /// Module
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"Id", Order = 1, TypeName = "int")]
        [Index(@"PK_Encounters", 1, IsUnique = true, IsClustered = true)]
        [Key]
        [Display(Name = "Id")]
        public int Id { get; set; } // Id (Primary key)

        [Column(@"ProviderId", Order = 2, TypeName = "int")]
        [Display(Name = "Provider ID")]
        public int ProviderId { get; set; } // ProviderId

        [Column(@"ServiceTypeId", Order = 3, TypeName = "int")]
        [Display(Name = "Service type ID")]
        public int ServiceTypeId { get; set; } // ServiceTypeId

        [Column(@"NonMspServiceTypeId", Order = 4, TypeName = "int")]
        [Display(Name = "Non msp service type ID")]
        public int? NonMspServiceTypeId { get; set; } // NonMspServiceTypeId

        [Column(@"EvaluationTypeId", Order = 5, TypeName = "int")]
        [Display(Name = "Evaluation type ID")]
        public int? EvaluationTypeId { get; set; } // EvaluationTypeId

        [Column(@"EncounterDate", Order = 6, TypeName = "datetime")]
        [Display(Name = "Encounter date")]
        public System.DateTime? EncounterDate { get; set; } // EncounterDate

        [Column(@"EncounterStartTime", Order = 7, TypeName = "time")]
        [Display(Name = "Encounter start time")]
        public System.TimeSpan? EncounterStartTime { get; set; } // EncounterStartTime

        [Column(@"EncounterEndTime", Order = 8, TypeName = "time")]
        [Display(Name = "Encounter end time")]
        public System.TimeSpan? EncounterEndTime { get; set; } // EncounterEndTime

        [Column(@"IsGroup", Order = 9, TypeName = "bit")]
        [Display(Name = "Is group")]
        public bool IsGroup { get; set; } // IsGroup

        [Column(@"AdditionalStudents", Order = 10, TypeName = "int")]
        [Display(Name = "Additional students")]
        public int AdditionalStudents { get; set; } // AdditionalStudents

        [Column(@"FromSchedule", Order = 11, TypeName = "bit")]
        [Display(Name = "From schedule")]
        public bool FromSchedule { get; set; } // FromSchedule

        [Column(@"DiagnosisCodeId", Order = 12, TypeName = "int")]
        [Display(Name = "Diagnosis code ID")]
        public int? DiagnosisCodeId { get; set; } // DiagnosisCodeId

        [Column(@"Archived", Order = 13, TypeName = "bit")]
        [Display(Name = "Archived")]
        public bool Archived { get; set; } // Archived

        [Column(@"CreatedById", Order = 14, TypeName = "int")]
        [Display(Name = "Created by ID")]
        public int CreatedById { get; set; } // CreatedById

        [Column(@"ModifiedById", Order = 15, TypeName = "int")]
        [Display(Name = "Modified by ID")]
        public int? ModifiedById { get; set; } // ModifiedById

        [Column(@"DateCreated", Order = 16, TypeName = "datetime")]
        [Display(Name = "Date created")]
        public System.DateTime? DateCreated { get; set; } // DateCreated

        [Column(@"DateModified", Order = 17, TypeName = "datetime")]
        [Display(Name = "Date modified")]
        public System.DateTime? DateModified { get; set; } // DateModified

        // Reverse navigation

        /// <summary>
        /// Child EncounterStudents where [EncounterStudents].[EncounterId] point to this entity (FK_EncounterStudents_Encounter)
        /// </summary>
        public System.Collections.Generic.ICollection<EncounterStudent> EncounterStudents { get; set; } // EncounterStudents.FK_EncounterStudents_Encounter

        // Foreign keys

        /// <summary>
        /// Parent User pointed by [Encounters].([CreatedById]) (FK_Encounters_CreatedBy)
        /// </summary>
        [InverseProperty("Encounters_CreatedById")]
        [ForeignKey("CreatedById")] public User CreatedBy { get; set; } // FK_Encounters_CreatedBy

        /// <summary>
        /// Parent DiagnosisCode pointed by [Encounters].([DiagnosisCodeId]) (FK_Encounters_DiagnosisCodes)
        /// </summary>
        [InverseProperty("Encounters")]
        [ForeignKey("DiagnosisCodeId")] public DiagnosisCode DiagnosisCode { get; set; } // FK_Encounters_DiagnosisCodes

        /// <summary>
        /// Parent EvaluationType pointed by [Encounters].([EvaluationTypeId]) (FK_Encounters_EvaluationType)
        /// </summary>
        [InverseProperty("Encounters")]
        [ForeignKey("EvaluationTypeId")] public EvaluationType EvaluationType { get; set; } // FK_Encounters_EvaluationType

        /// <summary>
        /// Parent User pointed by [Encounters].([ModifiedById]) (FK_Encounters_ModifiedBy)
        /// </summary>
        [InverseProperty("Encounters_ModifiedById")]
        [ForeignKey("ModifiedById")] public User ModifiedBy { get; set; } // FK_Encounters_ModifiedBy

        /// <summary>
        /// Parent NonMspService pointed by [Encounters].([NonMspServiceTypeId]) (FK_Encounters_NonMspServices)
        /// </summary>
        [InverseProperty("Encounters")]
        [ForeignKey("NonMspServiceTypeId")] public NonMspService NonMspService { get; set; } // FK_Encounters_NonMspServices

        /// <summary>
        /// Parent Provider pointed by [Encounters].([ProviderId]) (FK_Encounters_Provider)
        /// </summary>
        [InverseProperty("Encounters")]
        [ForeignKey("ProviderId")] public Provider Provider { get; set; } // FK_Encounters_Provider

        /// <summary>
        /// Parent ServiceType pointed by [Encounters].([ServiceTypeId]) (FK_Encounters_ServiceType)
        /// </summary>
        [InverseProperty("Encounters")]
        [ForeignKey("ServiceTypeId")] public ServiceType ServiceType { get; set; } // FK_Encounters_ServiceType

        public Encounter()
        {
            IsGroup = false;
            AdditionalStudents = 0;
            FromSchedule = false;
            Archived = false;
            CreatedById = 1;
            DateCreated = System.DateTime.UtcNow;
            EncounterStudents = new System.Collections.Generic.List<EncounterStudent>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>
