// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Model
{
    using Newtonsoft.Json;
    using System;
    using System.ComponentModel.DataAnnotations;
    using System.Data.SqlClient;
    using TrackerEnabledDbContext;

    // ConsoleJobLogs
    [Table("ConsoleJobLogs", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.0.0")]
    public partial class ConsoleJobLog: IEntity
    {
        // ConsoleJobLog
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"Id", Order = 1, TypeName = "int")]
        [Index(@"PK_ConsoleJobLogs", 1, IsUnique = true, IsClustered = true)]
        [Key]
        [Display(Name = "Id")]
        public int Id { get; set; } // Id (Primary key)

        [Column(@"Date", Order = 2, TypeName = "datetime")]
        [Display(Name = "Date")]
        public System.DateTime Date { get; set; } // Date

        [Column(@"IsError", Order = 3, TypeName = "bit")]
        [Display(Name = "Is error")]
        public bool IsError { get; set; } // IsError

        [Column(@"StackTrace", Order = 4, TypeName = "varchar(max)")]
        [Display(Name = "Stack trace")]
        public string StackTrace { get; set; } // StackTrace

        [Column(@"ErrorMessage", Order = 5, TypeName = "varchar(max)")]
        [Display(Name = "Error message")]
        public string ErrorMessage { get; set; } // ErrorMessage

        [Column(@"ConsoleJobTypeId", Order = 6, TypeName = "int")]
        [Display(Name = "Console job type ID")]
        public int ConsoleJobTypeId { get; set; } // ConsoleJobTypeId

        [Column(@"RelatedEntityId", Order = 7, TypeName = "int")]
        [Display(Name = "Related entity ID")]
        public int? RelatedEntityId { get; set; } // RelatedEntityId

        // Foreign keys

        /// <summary>
        /// Parent ConsoleJobType pointed by [ConsoleJobLogs].([ConsoleJobTypeId]) (FK_ConsoleJobLogs_ConsoleJobTypes)
        /// </summary>
        [InverseProperty("ConsoleJobLogs")]
        [ForeignKey("ConsoleJobTypeId")] public ConsoleJobType ConsoleJobType { get; set; } // FK_ConsoleJobLogs_ConsoleJobTypes

        public ConsoleJobLog()
        {
            Date = System.DateTime.Now;
            IsError = false;
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>
