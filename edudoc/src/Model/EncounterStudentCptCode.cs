// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Model
{
    using Newtonsoft.Json;
    using System;
    using System.ComponentModel.DataAnnotations;
    using System.Data.SqlClient;
    using TrackerEnabledDbContext;

    // EncounterStudentCptCodes
    [Table("EncounterStudentCptCodes", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.0.0")]
    public partial class EncounterStudentCptCode: IEntity
    {
        // EncounterStudentCptCode
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"Id", Order = 1, TypeName = "int")]
        [Index(@"PK_EncounterStudentCptCodes", 1, IsUnique = true, IsClustered = true)]
        [Key]
        [Display(Name = "Id")]
        public int Id { get; set; } // Id (Primary key)

        [Column(@"EncounterStudentId", Order = 2, TypeName = "int")]
        [Index(@"IX_EncounterStudentCptCodes", 1, IsUnique = false, IsClustered = false)]
        [Display(Name = "Encounter student ID")]
        public int EncounterStudentId { get; set; } // EncounterStudentId

        [Column(@"CptCodeId", Order = 3, TypeName = "int")]
        [Display(Name = "Cpt code ID")]
        public int CptCodeId { get; set; } // CptCodeId

        [Column(@"Minutes", Order = 4, TypeName = "int")]
        [Display(Name = "Minutes")]
        public int? Minutes { get; set; } // Minutes

        [Column(@"Archived", Order = 5, TypeName = "bit")]
        [Display(Name = "Archived")]
        public bool Archived { get; set; } // Archived

        [Column(@"CreatedById", Order = 6, TypeName = "int")]
        [Display(Name = "Created by ID")]
        public int CreatedById { get; set; } // CreatedById

        [Column(@"ModifiedById", Order = 7, TypeName = "int")]
        [Display(Name = "Modified by ID")]
        public int? ModifiedById { get; set; } // ModifiedById

        [Column(@"DateCreated", Order = 8, TypeName = "datetime")]
        [Display(Name = "Date created")]
        public System.DateTime? DateCreated { get; set; } // DateCreated

        [Column(@"DateModified", Order = 9, TypeName = "datetime")]
        [Display(Name = "Date modified")]
        public System.DateTime? DateModified { get; set; } // DateModified

        // Reverse navigation

        /// <summary>
        /// Child ClaimsEncounters where [ClaimsEncounters].[AggregateId] point to this entity (FK_ClaimsEncounters_AggregateCptCode)
        /// </summary>
        public System.Collections.Generic.ICollection<ClaimsEncounter> ClaimsEncounters_AggregateId { get; set; } // ClaimsEncounters.FK_ClaimsEncounters_AggregateCptCode
        /// <summary>
        /// Child ClaimsEncounters where [ClaimsEncounters].[EncounterStudentCptCodeId] point to this entity (FK_ClaimsEncounters_EncounterStudentCptCode)
        /// </summary>
        public System.Collections.Generic.ICollection<ClaimsEncounter> ClaimsEncounters_EncounterStudentCptCodeId { get; set; } // ClaimsEncounters.FK_ClaimsEncounters_EncounterStudentCptCode

        // Foreign keys

        /// <summary>
        /// Parent CptCode pointed by [EncounterStudentCptCodes].([CptCodeId]) (FK_EncounterStudentCptCodes_CptCode)
        /// </summary>
        [InverseProperty("EncounterStudentCptCodes")]
        [ForeignKey("CptCodeId")] public CptCode CptCode { get; set; } // FK_EncounterStudentCptCodes_CptCode

        /// <summary>
        /// Parent User pointed by [EncounterStudentCptCodes].([CreatedById]) (FK_EncounterStudentCptCodes_CreatedBy)
        /// </summary>
        [InverseProperty("EncounterStudentCptCodes_CreatedById")]
        [ForeignKey("CreatedById")] public User CreatedBy { get; set; } // FK_EncounterStudentCptCodes_CreatedBy

        /// <summary>
        /// Parent EncounterStudent pointed by [EncounterStudentCptCodes].([EncounterStudentId]) (FK_EncounterStudentCptCodes_EncounterStudent)
        /// </summary>
        [InverseProperty("EncounterStudentCptCodes")]
        [ForeignKey("EncounterStudentId")] public EncounterStudent EncounterStudent { get; set; } // FK_EncounterStudentCptCodes_EncounterStudent

        /// <summary>
        /// Parent User pointed by [EncounterStudentCptCodes].([ModifiedById]) (FK_EncounterStudentCptCodes_ModifiedBy)
        /// </summary>
        [InverseProperty("EncounterStudentCptCodes_ModifiedById")]
        [ForeignKey("ModifiedById")] public User ModifiedBy { get; set; } // FK_EncounterStudentCptCodes_ModifiedBy

        public EncounterStudentCptCode()
        {
            Archived = false;
            CreatedById = 1;
            DateCreated = System.DateTime.UtcNow;
            ClaimsEncounters_AggregateId = new System.Collections.Generic.List<ClaimsEncounter>();
            ClaimsEncounters_EncounterStudentCptCodeId = new System.Collections.Generic.List<ClaimsEncounter>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>
