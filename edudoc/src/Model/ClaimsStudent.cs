// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Model
{
    using Newtonsoft.Json;
    using System;
    using System.ComponentModel.DataAnnotations;
    using System.Data.SqlClient;
    using TrackerEnabledDbContext;

    // ClaimsStudents
    [Table("ClaimsStudents", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.0.0")]
    public partial class ClaimsStudent: IEntity
    {
        // ClaimsStudent
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"Id", Order = 1, TypeName = "int")]
        [Index(@"PK_ClaimsStudents", 1, IsUnique = true, IsClustered = true)]
        [Key]
        [Display(Name = "Id")]
        public int Id { get; set; } // Id (Primary key)

        [Column(@"LastName", Order = 2, TypeName = "varchar")]
        [MaxLength(60)]
        [StringLength(60)]
        [Display(Name = "Last name")]
        public string LastName { get; set; } // LastName (length: 60)

        [Column(@"FirstName", Order = 3, TypeName = "varchar")]
        [MaxLength(35)]
        [StringLength(35)]
        [Display(Name = "First name")]
        public string FirstName { get; set; } // FirstName (length: 35)

        [Column(@"IdentificationCode", Order = 4, TypeName = "varchar")]
        [MaxLength(12)]
        [StringLength(12)]
        [Display(Name = "Identification code")]
        public string IdentificationCode { get; set; } // IdentificationCode (length: 12)

        [Column(@"Address", Order = 5, TypeName = "varchar")]
        [MaxLength(55)]
        [StringLength(55)]
        [Display(Name = "Address")]
        public string Address { get; set; } // Address (length: 55)

        [Column(@"City", Order = 6, TypeName = "varchar")]
        [MaxLength(30)]
        [StringLength(30)]
        [Display(Name = "City")]
        public string City { get; set; } // City (length: 30)

        [Column(@"State", Order = 7, TypeName = "varchar")]
        [MaxLength(2)]
        [StringLength(2)]
        [Display(Name = "State")]
        public string State { get; set; } // State (length: 2)

        [Column(@"PostalCode", Order = 8, TypeName = "varchar")]
        [MaxLength(15)]
        [StringLength(15)]
        [Display(Name = "Postal code")]
        public string PostalCode { get; set; } // PostalCode (length: 15)

        [Column(@"InsuredDateTimePeriod", Order = 9, TypeName = "varchar")]
        [MaxLength(35)]
        [StringLength(35)]
        [Display(Name = "Insured date time period")]
        public string InsuredDateTimePeriod { get; set; } // InsuredDateTimePeriod (length: 35)

        [Column(@"ResponseValid", Order = 10, TypeName = "bit")]
        [Display(Name = "Response valid")]
        public bool? ResponseValid { get; set; } // ResponseValid

        [Column(@"ResponseRejectReason", Order = 11, TypeName = "int")]
        [Display(Name = "Response reject reason")]
        public int? ResponseRejectReason { get; set; } // ResponseRejectReason

        [Column(@"ResponseFollowUpAction", Order = 12, TypeName = "varchar")]
        [MaxLength(2)]
        [StringLength(2)]
        [Display(Name = "Response follow up action")]
        public string ResponseFollowUpAction { get; set; } // ResponseFollowUpAction (length: 2)

        [Column(@"ClaimsDistrictId", Order = 13, TypeName = "int")]
        [Display(Name = "Claims district ID")]
        public int ClaimsDistrictId { get; set; } // ClaimsDistrictId

        [Column(@"StudentId", Order = 14, TypeName = "int")]
        [Display(Name = "Student ID")]
        public int StudentId { get; set; } // StudentId

        // Reverse navigation

        /// <summary>
        /// Child ClaimsEncounters where [ClaimsEncounters].[ClaimsStudentId] point to this entity (FK_ClaimsEncounters_ClaimsStudent)
        /// </summary>
        public System.Collections.Generic.ICollection<ClaimsEncounter> ClaimsEncounters { get; set; } // ClaimsEncounters.FK_ClaimsEncounters_ClaimsStudent

        // Foreign keys

        /// <summary>
        /// Parent ClaimsDistrict pointed by [ClaimsStudents].([ClaimsDistrictId]) (FK_ClaimsStudents_ClaimsDistrict)
        /// </summary>
        [InverseProperty("ClaimsStudents")]
        [ForeignKey("ClaimsDistrictId")] public ClaimsDistrict ClaimsDistrict { get; set; } // FK_ClaimsStudents_ClaimsDistrict

        /// <summary>
        /// Parent Student pointed by [ClaimsStudents].([StudentId]) (FK_ClaimsStudents_Student)
        /// </summary>
        [InverseProperty("ClaimsStudents")]
        [ForeignKey("StudentId")] public Student Student { get; set; } // FK_ClaimsStudents_Student

        public ClaimsStudent()
        {
            ClaimsEncounters = new System.Collections.Generic.List<ClaimsEncounter>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>
